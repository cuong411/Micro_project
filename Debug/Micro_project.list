
Micro_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080046e0  080046e0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e0  080046e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000090  08004778  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08004778  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2ad  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f3  00000000  00000000  0002d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000305b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019281  00000000  00000000  000311f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe6  00000000  00000000  0004a479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008884c  00000000  00000000  0005b45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3cab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a0  00000000  00000000  000e3cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080045c4 	.word	0x080045c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080045c4 	.word	0x080045c4

0800014c <key0Process>:
int keyReg1[NO_BUTTONS];
int keyReg2[NO_BUTTONS];
int keyReg3[NO_BUTTONS];


void key0Process() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	currentTick = DEAD_MODIFIED;
 8000150:	4b23      	ldr	r3, [pc, #140]	; (80001e0 <key0Process+0x94>)
 8000152:	2232      	movs	r2, #50	; 0x32
 8000154:	601a      	str	r2, [r3, #0]
	sprintf(msg, "BUTTON %d\r\n", currentTick);
 8000156:	4b22      	ldr	r3, [pc, #136]	; (80001e0 <key0Process+0x94>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	461a      	mov	r2, r3
 800015c:	4921      	ldr	r1, [pc, #132]	; (80001e4 <key0Process+0x98>)
 800015e:	4822      	ldr	r0, [pc, #136]	; (80001e8 <key0Process+0x9c>)
 8000160:	f003 fdb6 	bl	8003cd0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 8000164:	2332      	movs	r3, #50	; 0x32
 8000166:	2214      	movs	r2, #20
 8000168:	491f      	ldr	r1, [pc, #124]	; (80001e8 <key0Process+0x9c>)
 800016a:	4820      	ldr	r0, [pc, #128]	; (80001ec <key0Process+0xa0>)
 800016c:	f003 f8f3 	bl	8003356 <HAL_UART_Transmit>
	if (currentMode == AUTO) {
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <key0Process+0xa4>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d10a      	bne.n	800018e <key0Process+0x42>
		currentMode = MODIFIED;
 8000178:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <key0Process+0xa4>)
 800017a:	2201      	movs	r2, #1
 800017c:	601a      	str	r2, [r3, #0]
		state = MOD_RED;
 800017e:	4b1d      	ldr	r3, [pc, #116]	; (80001f4 <key0Process+0xa8>)
 8000180:	2205      	movs	r2, #5
 8000182:	601a      	str	r2, [r3, #0]
		tempDuration = timeRed;
 8000184:	4b1c      	ldr	r3, [pc, #112]	; (80001f8 <key0Process+0xac>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <key0Process+0xb0>)
 800018a:	6013      	str	r3, [r2, #0]
			state = STATE0;
			currentMode = AUTO;
			break;
		}
	}
}
 800018c:	e026      	b.n	80001dc <key0Process+0x90>
	else if (currentMode == MODIFIED) {
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <key0Process+0xa4>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d121      	bne.n	80001da <key0Process+0x8e>
		switch (state) {
 8000196:	4b17      	ldr	r3, [pc, #92]	; (80001f4 <key0Process+0xa8>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	2b07      	cmp	r3, #7
 800019c:	d016      	beq.n	80001cc <key0Process+0x80>
 800019e:	2b07      	cmp	r3, #7
 80001a0:	dc1c      	bgt.n	80001dc <key0Process+0x90>
 80001a2:	2b05      	cmp	r3, #5
 80001a4:	d002      	beq.n	80001ac <key0Process+0x60>
 80001a6:	2b06      	cmp	r3, #6
 80001a8:	d008      	beq.n	80001bc <key0Process+0x70>
}
 80001aa:	e017      	b.n	80001dc <key0Process+0x90>
			state = MOD_GREEN;
 80001ac:	4b11      	ldr	r3, [pc, #68]	; (80001f4 <key0Process+0xa8>)
 80001ae:	2206      	movs	r2, #6
 80001b0:	601a      	str	r2, [r3, #0]
			tempDuration = timeGreen;
 80001b2:	4b13      	ldr	r3, [pc, #76]	; (8000200 <key0Process+0xb4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a11      	ldr	r2, [pc, #68]	; (80001fc <key0Process+0xb0>)
 80001b8:	6013      	str	r3, [r2, #0]
			break;
 80001ba:	e00f      	b.n	80001dc <key0Process+0x90>
			state = MOD_YELLOW;
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <key0Process+0xa8>)
 80001be:	2207      	movs	r2, #7
 80001c0:	601a      	str	r2, [r3, #0]
			tempDuration = timeYellow;
 80001c2:	4b10      	ldr	r3, [pc, #64]	; (8000204 <key0Process+0xb8>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <key0Process+0xb0>)
 80001c8:	6013      	str	r3, [r2, #0]
			break;
 80001ca:	e007      	b.n	80001dc <key0Process+0x90>
			state = STATE0;
 80001cc:	4b09      	ldr	r3, [pc, #36]	; (80001f4 <key0Process+0xa8>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
			currentMode = AUTO;
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <key0Process+0xa4>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
			break;
 80001d8:	e000      	b.n	80001dc <key0Process+0x90>
	}
 80001da:	bf00      	nop
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	080045dc 	.word	0x080045dc
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	200001b0 	.word	0x200001b0
 80001f0:	200000fc 	.word	0x200000fc
 80001f4:	20000100 	.word	0x20000100
 80001f8:	20000010 	.word	0x20000010
 80001fc:	20000104 	.word	0x20000104
 8000200:	20000018 	.word	0x20000018
 8000204:	20000014 	.word	0x20000014

08000208 <key1Process>:
void key1Process() {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	if (currentMode == MODIFIED) {
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <key1Process+0x24>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d107      	bne.n	8000224 <key1Process+0x1c>
		tempDuration += 10;
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <key1Process+0x28>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	330a      	adds	r3, #10
 800021a:	4a05      	ldr	r2, [pc, #20]	; (8000230 <key1Process+0x28>)
 800021c:	6013      	str	r3, [r2, #0]
		currentTick = DEAD_MODIFIED;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <key1Process+0x2c>)
 8000220:	2232      	movs	r2, #50	; 0x32
 8000222:	601a      	str	r2, [r3, #0]
	}
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	200000fc 	.word	0x200000fc
 8000230:	20000104 	.word	0x20000104
 8000234:	2000001c 	.word	0x2000001c

08000238 <key2Process>:

void key2Process() {
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	if (currentMode == MODIFIED) {
 800023c:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <key2Process+0x7c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d132      	bne.n	80002aa <key2Process+0x72>
		switch (state) {
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <key2Process+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b07      	cmp	r3, #7
 800024a:	d016      	beq.n	800027a <key2Process+0x42>
 800024c:	2b07      	cmp	r3, #7
 800024e:	dc1c      	bgt.n	800028a <key2Process+0x52>
 8000250:	2b05      	cmp	r3, #5
 8000252:	d002      	beq.n	800025a <key2Process+0x22>
 8000254:	2b06      	cmp	r3, #6
 8000256:	d008      	beq.n	800026a <key2Process+0x32>
 8000258:	e017      	b.n	800028a <key2Process+0x52>
		case MOD_RED:
			timeRed = tempDuration;
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <key2Process+0x84>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a18      	ldr	r2, [pc, #96]	; (80002c0 <key2Process+0x88>)
 8000260:	6013      	str	r3, [r2, #0]
			currentTick = DEAD_MODIFIED;
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <key2Process+0x8c>)
 8000264:	2232      	movs	r2, #50	; 0x32
 8000266:	601a      	str	r2, [r3, #0]
			break;
 8000268:	e00f      	b.n	800028a <key2Process+0x52>
		case MOD_GREEN:
			timeGreen = tempDuration;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <key2Process+0x84>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <key2Process+0x90>)
 8000270:	6013      	str	r3, [r2, #0]
			currentTick = DEAD_MODIFIED;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <key2Process+0x8c>)
 8000274:	2232      	movs	r2, #50	; 0x32
 8000276:	601a      	str	r2, [r3, #0]
			break;
 8000278:	e007      	b.n	800028a <key2Process+0x52>
		case MOD_YELLOW:
			timeYellow = tempDuration;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <key2Process+0x84>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a13      	ldr	r2, [pc, #76]	; (80002cc <key2Process+0x94>)
 8000280:	6013      	str	r3, [r2, #0]
			currentTick = DEAD_MODIFIED;
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <key2Process+0x8c>)
 8000284:	2232      	movs	r2, #50	; 0x32
 8000286:	601a      	str	r2, [r3, #0]
			break;
 8000288:	bf00      	nop
		}
		pivot[0] = timeGreen;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <key2Process+0x90>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <key2Process+0x98>)
 8000290:	6013      	str	r3, [r2, #0]
		pivot[1] = timeYellow;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <key2Process+0x94>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <key2Process+0x98>)
 8000298:	6053      	str	r3, [r2, #4]
		pivot[2] = timeGreen;
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <key2Process+0x90>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <key2Process+0x98>)
 80002a0:	6093      	str	r3, [r2, #8]
		pivot[3] = timeYellow;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <key2Process+0x94>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <key2Process+0x98>)
 80002a8:	60d3      	str	r3, [r2, #12]
	}
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	200000fc 	.word	0x200000fc
 80002b8:	20000100 	.word	0x20000100
 80002bc:	20000104 	.word	0x20000104
 80002c0:	20000010 	.word	0x20000010
 80002c4:	2000001c 	.word	0x2000001c
 80002c8:	20000018 	.word	0x20000018
 80002cc:	20000014 	.word	0x20000014
 80002d0:	20000000 	.word	0x20000000

080002d4 <key3Process>:
void key3Process(){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	pedestrianFlag = 1;
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <key3Process+0x14>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000108 	.word	0x20000108

080002ec <getKeyInput>:

void getKeyInput(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	for (int i=0; i<NO_BUTTONS; i++) {
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	e0a5      	b.n	8000444 <getKeyInput+0x158>
		keyReg0[i] = keyReg1[i];
 80002f8:	4a57      	ldr	r2, [pc, #348]	; (8000458 <getKeyInput+0x16c>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000300:	4956      	ldr	r1, [pc, #344]	; (800045c <getKeyInput+0x170>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 8000308:	4a55      	ldr	r2, [pc, #340]	; (8000460 <getKeyInput+0x174>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4951      	ldr	r1, [pc, #324]	; (8000458 <getKeyInput+0x16c>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d83a      	bhi.n	8000394 <getKeyInput+0xa8>
 800031e:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <getKeyInput+0x38>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000335 	.word	0x08000335
 8000328:	0800034d 	.word	0x0800034d
 800032c:	08000365 	.word	0x08000365
 8000330:	0800037d 	.word	0x0800037d
		case 0:
			keyReg2[i] = HAL_GPIO_ReadPin(GPIOA, Mode_Button_Pin);
 8000334:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000338:	484a      	ldr	r0, [pc, #296]	; (8000464 <getKeyInput+0x178>)
 800033a:	f001 fc03 	bl	8001b44 <HAL_GPIO_ReadPin>
 800033e:	4603      	mov	r3, r0
 8000340:	4619      	mov	r1, r3
 8000342:	4a47      	ldr	r2, [pc, #284]	; (8000460 <getKeyInput+0x174>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800034a:	e023      	b.n	8000394 <getKeyInput+0xa8>
		case 1:
			keyReg2[i] = HAL_GPIO_ReadPin(GPIOA, Add_Button_Pin);
 800034c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000350:	4844      	ldr	r0, [pc, #272]	; (8000464 <getKeyInput+0x178>)
 8000352:	f001 fbf7 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	4619      	mov	r1, r3
 800035a:	4a41      	ldr	r2, [pc, #260]	; (8000460 <getKeyInput+0x174>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000362:	e017      	b.n	8000394 <getKeyInput+0xa8>
		case 2:
			keyReg2[i] = HAL_GPIO_ReadPin(GPIOA, Confirm_Button_Pin);
 8000364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <getKeyInput+0x178>)
 800036a:	f001 fbeb 	bl	8001b44 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	4619      	mov	r1, r3
 8000372:	4a3b      	ldr	r2, [pc, #236]	; (8000460 <getKeyInput+0x174>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800037a:	e00b      	b.n	8000394 <getKeyInput+0xa8>
		case 3:
			keyReg2[i] = HAL_GPIO_ReadPin(GPIOA, Perdes_Button_Pin);
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	4838      	ldr	r0, [pc, #224]	; (8000464 <getKeyInput+0x178>)
 8000382:	f001 fbdf 	bl	8001b44 <HAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4a35      	ldr	r2, [pc, #212]	; (8000460 <getKeyInput+0x174>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000392:	bf00      	nop
		}
		if ( (keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]) ){
 8000394:	4a31      	ldr	r2, [pc, #196]	; (800045c <getKeyInput+0x170>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	492e      	ldr	r1, [pc, #184]	; (8000458 <getKeyInput+0x16c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d149      	bne.n	800043c <getKeyInput+0x150>
 80003a8:	4a2b      	ldr	r2, [pc, #172]	; (8000458 <getKeyInput+0x16c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	492b      	ldr	r1, [pc, #172]	; (8000460 <getKeyInput+0x174>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d13f      	bne.n	800043c <getKeyInput+0x150>
			if (keyReg3[i] != keyReg2[i]) {
 80003bc:	4a2a      	ldr	r2, [pc, #168]	; (8000468 <getKeyInput+0x17c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	4926      	ldr	r1, [pc, #152]	; (8000460 <getKeyInput+0x174>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d035      	beq.n	800043c <getKeyInput+0x150>
				keyReg3[i] = keyReg2[i];
 80003d0:	4a23      	ldr	r2, [pc, #140]	; (8000460 <getKeyInput+0x174>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d8:	4923      	ldr	r1, [pc, #140]	; (8000468 <getKeyInput+0x17c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				sprintf(msg, "CHECK %d\r\n", currentTick);
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <getKeyInput+0x180>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4922      	ldr	r1, [pc, #136]	; (8000470 <getKeyInput+0x184>)
 80003e8:	4822      	ldr	r0, [pc, #136]	; (8000474 <getKeyInput+0x188>)
 80003ea:	f003 fc71 	bl	8003cd0 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80003ee:	2332      	movs	r3, #50	; 0x32
 80003f0:	2214      	movs	r2, #20
 80003f2:	4920      	ldr	r1, [pc, #128]	; (8000474 <getKeyInput+0x188>)
 80003f4:	4820      	ldr	r0, [pc, #128]	; (8000478 <getKeyInput+0x18c>)
 80003f6:	f002 ffae 	bl	8003356 <HAL_UART_Transmit>
				if (keyReg2[i] == PRESSED_STATE) {
 80003fa:	4a19      	ldr	r2, [pc, #100]	; (8000460 <getKeyInput+0x174>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d11a      	bne.n	800043c <getKeyInput+0x150>
					switch (i) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d818      	bhi.n	800043e <getKeyInput+0x152>
 800040c:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <getKeyInput+0x128>)
 800040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000412:	bf00      	nop
 8000414:	08000425 	.word	0x08000425
 8000418:	0800042b 	.word	0x0800042b
 800041c:	08000431 	.word	0x08000431
 8000420:	08000437 	.word	0x08000437
					case 0:
						key0Process();
 8000424:	f7ff fe92 	bl	800014c <key0Process>
						break;
 8000428:	e009      	b.n	800043e <getKeyInput+0x152>
					case 1:
						key1Process();
 800042a:	f7ff feed 	bl	8000208 <key1Process>
						break;
 800042e:	e006      	b.n	800043e <getKeyInput+0x152>
					case 2:
						key2Process();
 8000430:	f7ff ff02 	bl	8000238 <key2Process>
						break;
 8000434:	e003      	b.n	800043e <getKeyInput+0x152>
					case 3:
						key3Process();
 8000436:	f7ff ff4d 	bl	80002d4 <key3Process>
						break;
 800043a:	e000      	b.n	800043e <getKeyInput+0x152>
					}
				}
 800043c:	bf00      	nop
	for (int i=0; i<NO_BUTTONS; i++) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b04      	cmp	r3, #4
 8000448:	f77f af56 	ble.w	80002f8 <getKeyInput+0xc>
			}
		}
	}
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000c0 	.word	0x200000c0
 800045c:	200000ac 	.word	0x200000ac
 8000460:	200000d4 	.word	0x200000d4
 8000464:	40010800 	.word	0x40010800
 8000468:	200000e8 	.word	0x200000e8
 800046c:	2000001c 	.word	0x2000001c
 8000470:	080045e8 	.word	0x080045e8
 8000474:	2000010c 	.word	0x2000010c
 8000478:	200001b0 	.word	0x200001b0

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000480:	f001 f822 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000484:	f000 f830 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f95c 	bl	8000744 <MX_GPIO_Init>
  MX_TIM2_Init();
 800048c:	f000 f86e 	bl	800056c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000490:	f000 f8b8 	bl	8000604 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000494:	f000 f92c 	bl	80006f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <main+0x54>)
 800049a:	f002 f81d 	bl	80024d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <main+0x58>)
 80004a2:	f002 f8bd 	bl	8002620 <HAL_TIM_PWM_Start>
  SCH_init();
 80004a6:	f000 fa5d 	bl	8000964 <SCH_init>
  init_task();
 80004aa:	f000 ff43 	bl	8001334 <init_task>
  sprintf(msg, "%d\r\n", currentTick);
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <main+0x5c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	4909      	ldr	r1, [pc, #36]	; (80004dc <main+0x60>)
 80004b6:	480a      	ldr	r0, [pc, #40]	; (80004e0 <main+0x64>)
 80004b8:	f003 fc0a 	bl	8003cd0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80004bc:	2332      	movs	r3, #50	; 0x32
 80004be:	2214      	movs	r2, #20
 80004c0:	4907      	ldr	r1, [pc, #28]	; (80004e0 <main+0x64>)
 80004c2:	4808      	ldr	r0, [pc, #32]	; (80004e4 <main+0x68>)
 80004c4:	f002 ff47 	bl	8003356 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    SCH_dispatch_tasks();
 80004c8:	f000 fb0e 	bl	8000ae8 <SCH_dispatch_tasks>
 80004cc:	e7fc      	b.n	80004c8 <main+0x4c>
 80004ce:	bf00      	nop
 80004d0:	20000120 	.word	0x20000120
 80004d4:	20000168 	.word	0x20000168
 80004d8:	2000001c 	.word	0x2000001c
 80004dc:	080045f4 	.word	0x080045f4
 80004e0:	2000010c 	.word	0x2000010c
 80004e4:	200001b0 	.word	0x200001b0

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b090      	sub	sp, #64	; 0x40
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0318 	add.w	r3, r7, #24
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fbe2 	bl	8003cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800051a:	2300      	movs	r3, #0
 800051c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800051e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000522:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000524:	f107 0318 	add.w	r3, r7, #24
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fb3b 	bl	8001ba4 <HAL_RCC_OscConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000534:	f000 f966 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	230f      	movs	r3, #15
 800053a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	2302      	movs	r3, #2
 800053e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2102      	movs	r1, #2
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fda8 	bl	80020a8 <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800055e:	f000 f951 	bl	8000804 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3740      	adds	r7, #64	; 0x40
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_TIM2_Init+0x94>)
 800058a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800058e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_TIM2_Init+0x94>)
 8000592:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_TIM2_Init+0x94>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_TIM2_Init+0x94>)
 80005a0:	2209      	movs	r2, #9
 80005a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_TIM2_Init+0x94>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_TIM2_Init+0x94>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <MX_TIM2_Init+0x94>)
 80005b2:	f001 ff41 	bl	8002438 <HAL_TIM_Base_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005bc:	f000 f922 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	4619      	mov	r1, r3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_TIM2_Init+0x94>)
 80005ce:	f002 fa89 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005d8:	f000 f914 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_TIM2_Init+0x94>)
 80005ea:	f002 fdfd 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005f4:	f000 f906 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000120 	.word	0x20000120

08000604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	; 0x38
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000636:	4a2d      	ldr	r2, [pc, #180]	; (80006ec <MX_TIM3_Init+0xe8>)
 8000638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_TIM3_Init+0xe4>)
 800063c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000640:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <MX_TIM3_Init+0xe4>)
 800064a:	2209      	movs	r2, #9
 800064c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800065a:	4823      	ldr	r0, [pc, #140]	; (80006e8 <MX_TIM3_Init+0xe4>)
 800065c:	f001 feec 	bl	8002438 <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000666:	f000 f8cd 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000674:	4619      	mov	r1, r3
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000678:	f002 fa34 	bl	8002ae4 <HAL_TIM_ConfigClockSource>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000682:	f000 f8bf 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_TIM3_Init+0xe4>)
 8000688:	f001 ff72 	bl	8002570 <HAL_TIM_PWM_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000692:	f000 f8b7 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4619      	mov	r1, r3
 80006a4:	4810      	ldr	r0, [pc, #64]	; (80006e8 <MX_TIM3_Init+0xe4>)
 80006a6:	f002 fd9f 	bl	80031e8 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006b0:	f000 f8a8 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b4:	2360      	movs	r3, #96	; 0x60
 80006b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <MX_TIM3_Init+0xe4>)
 80006cc:	f002 f94c 	bl	8002968 <HAL_TIM_PWM_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006d6:	f000 f895 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_TIM3_Init+0xe4>)
 80006dc:	f000 fb5c 	bl	8000d98 <HAL_TIM_MspPostInit>

}
 80006e0:	bf00      	nop
 80006e2:	3738      	adds	r7, #56	; 0x38
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000168 	.word	0x20000168
 80006ec:	40000400 	.word	0x40000400

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART2_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART2_UART_Init+0x4c>)
 80006fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART2_UART_Init+0x4c>)
 8000728:	f002 fdc8 	bl	80032bc <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f867 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001b0 	.word	0x200001b0
 8000740:	40004400 	.word	0x40004400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_GPIO_Init+0x8c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_GPIO_Init+0x8c>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_GPIO_Init+0x8c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x8c>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x8c>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_11_Pin|Led_12_Pin|Led_21_Pin|Led_22_Pin
 8000788:	2200      	movs	r2, #0
 800078a:	213f      	movs	r1, #63	; 0x3f
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x90>)
 800078e:	f001 f9f0 	bl	8001b72 <HAL_GPIO_WritePin>
                          |PED0_Pin|PED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_11_Pin Led_12_Pin Led_21_Pin Led_22_Pin
                           PED0_Pin PED1_Pin */
  GPIO_InitStruct.Pin = Led_11_Pin|Led_12_Pin|Led_21_Pin|Led_22_Pin
 8000792:	233f      	movs	r3, #63	; 0x3f
 8000794:	60bb      	str	r3, [r7, #8]
                          |PED0_Pin|PED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2302      	movs	r3, #2
 80007a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <MX_GPIO_Init+0x90>)
 80007aa:	f001 f84f 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Button_Pin Add_Button_Pin Confirm_Button_Pin Perdes_Button_Pin */
  GPIO_InitStruct.Pin = Mode_Button_Pin|Add_Button_Pin|Confirm_Button_Pin|Perdes_Button_Pin;
 80007ae:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80007b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x94>)
 80007c4:	f001 f842 	bl	800184c <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	40010800 	.word	0x40010800

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	SCH_update();
 80007e4:	f000 f8d8 	bl	8000998 <SCH_update>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d101      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 80007f2:	f000 fe7f 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40012c00 	.word	0x40012c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <pedestrian_fsm>:
int timeLeft = 0;
int currentTrafficLight;
int timeFSM = 0;
uint32_t PWM = 0;

void pedestrian_fsm(){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	if (pedestrianFlag == 1){
 8000814:	4b47      	ldr	r3, [pc, #284]	; (8000934 <pedestrian_fsm+0x124>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 8085 	bne.w	8000928 <pedestrian_fsm+0x118>
//	void (*pTask)(void);
//	pTask = pedestrian_fsm;
		switch (state) {
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <pedestrian_fsm+0x128>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b03      	cmp	r3, #3
 8000824:	f200 8083 	bhi.w	800092e <pedestrian_fsm+0x11e>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <pedestrian_fsm+0x20>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000841 	.word	0x08000841
 8000834:	08000871 	.word	0x08000871
 8000838:	0800088d 	.word	0x0800088d
 800083c:	080008bd 	.word	0x080008bd
		case STATE0:
			HAL_GPIO_WritePin(GPIOB, PED0_Pin, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	2110      	movs	r1, #16
 8000844:	483d      	ldr	r0, [pc, #244]	; (800093c <pedestrian_fsm+0x12c>)
 8000846:	f001 f994 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, PED1_Pin, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	483b      	ldr	r0, [pc, #236]	; (800093c <pedestrian_fsm+0x12c>)
 8000850:	f001 f98f 	bl	8001b72 <HAL_GPIO_WritePin>
//			timeFSM=0;
			sprintf(msg, "PED0 %d\r\n", currentTick);
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <pedestrian_fsm+0x130>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	493a      	ldr	r1, [pc, #232]	; (8000944 <pedestrian_fsm+0x134>)
 800085c:	483a      	ldr	r0, [pc, #232]	; (8000948 <pedestrian_fsm+0x138>)
 800085e:	f003 fa37 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 8000862:	2332      	movs	r3, #50	; 0x32
 8000864:	2214      	movs	r2, #20
 8000866:	4938      	ldr	r1, [pc, #224]	; (8000948 <pedestrian_fsm+0x138>)
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <pedestrian_fsm+0x13c>)
 800086a:	f002 fd74 	bl	8003356 <HAL_UART_Transmit>
//			SCH_add_task(pTask, 1, 0);
			break;
 800086e:	e05e      	b.n	800092e <pedestrian_fsm+0x11e>
		case STATE1:
//			HAL_GPIO_WritePin(GPIOB, PED0_Pin, 1);
//			HAL_GPIO_WritePin(GPIOA, PED1_Pin, 1);
			sprintf(msg, "PED1 %d\r\n", currentTick);
 8000870:	4b33      	ldr	r3, [pc, #204]	; (8000940 <pedestrian_fsm+0x130>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4936      	ldr	r1, [pc, #216]	; (8000950 <pedestrian_fsm+0x140>)
 8000878:	4833      	ldr	r0, [pc, #204]	; (8000948 <pedestrian_fsm+0x138>)
 800087a:	f003 fa29 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 800087e:	2332      	movs	r3, #50	; 0x32
 8000880:	2214      	movs	r2, #20
 8000882:	4931      	ldr	r1, [pc, #196]	; (8000948 <pedestrian_fsm+0x138>)
 8000884:	4831      	ldr	r0, [pc, #196]	; (800094c <pedestrian_fsm+0x13c>)
 8000886:	f002 fd66 	bl	8003356 <HAL_UART_Transmit>
//			SCH_add_task(pTask, 1, 0);
			break;
 800088a:	e050      	b.n	800092e <pedestrian_fsm+0x11e>
		case STATE2:
			HAL_GPIO_WritePin(GPIOB, PED0_Pin, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	482a      	ldr	r0, [pc, #168]	; (800093c <pedestrian_fsm+0x12c>)
 8000892:	f001 f96e 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, PED1_Pin, 1);
 8000896:	2201      	movs	r2, #1
 8000898:	2120      	movs	r1, #32
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <pedestrian_fsm+0x12c>)
 800089c:	f001 f969 	bl	8001b72 <HAL_GPIO_WritePin>
			sprintf(msg, "PED2 %d\r\n", currentTick);
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <pedestrian_fsm+0x130>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	492b      	ldr	r1, [pc, #172]	; (8000954 <pedestrian_fsm+0x144>)
 80008a8:	4827      	ldr	r0, [pc, #156]	; (8000948 <pedestrian_fsm+0x138>)
 80008aa:	f003 fa11 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80008ae:	2332      	movs	r3, #50	; 0x32
 80008b0:	2214      	movs	r2, #20
 80008b2:	4925      	ldr	r1, [pc, #148]	; (8000948 <pedestrian_fsm+0x138>)
 80008b4:	4825      	ldr	r0, [pc, #148]	; (800094c <pedestrian_fsm+0x13c>)
 80008b6:	f002 fd4e 	bl	8003356 <HAL_UART_Transmit>
//			SCH_add_task(pTask, 1, 0);
			break;
 80008ba:	e038      	b.n	800092e <pedestrian_fsm+0x11e>
		case STATE3:
//			timePWM = currentTick%6;
			HAL_GPIO_WritePin(GPIOB, PED0_Pin, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2110      	movs	r1, #16
 80008c0:	481e      	ldr	r0, [pc, #120]	; (800093c <pedestrian_fsm+0x12c>)
 80008c2:	f001 f956 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, PED1_Pin, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2120      	movs	r1, #32
 80008ca:	481c      	ldr	r0, [pc, #112]	; (800093c <pedestrian_fsm+0x12c>)
 80008cc:	f001 f951 	bl	8001b72 <HAL_GPIO_WritePin>
			sprintf(msg, "PED3 %d\r\n", currentTick);
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <pedestrian_fsm+0x130>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4920      	ldr	r1, [pc, #128]	; (8000958 <pedestrian_fsm+0x148>)
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <pedestrian_fsm+0x138>)
 80008da:	f003 f9f9 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80008de:	2332      	movs	r3, #50	; 0x32
 80008e0:	2214      	movs	r2, #20
 80008e2:	4919      	ldr	r1, [pc, #100]	; (8000948 <pedestrian_fsm+0x138>)
 80008e4:	4819      	ldr	r0, [pc, #100]	; (800094c <pedestrian_fsm+0x13c>)
 80008e6:	f002 fd36 	bl	8003356 <HAL_UART_Transmit>
//				if (timePWM>=timeLeft) {
//					timePWM = 0;
//					__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3, (5 - timeLeft)*20);
//				}
//			}
			PWM += 5;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <pedestrian_fsm+0x14c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3305      	adds	r3, #5
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <pedestrian_fsm+0x14c>)
 80008f2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <pedestrian_fsm+0x150>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a18      	ldr	r2, [pc, #96]	; (800095c <pedestrian_fsm+0x14c>)
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
			if (currentTick<=5) {
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <pedestrian_fsm+0x130>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b05      	cmp	r3, #5
 8000904:	dc12      	bgt.n	800092c <pedestrian_fsm+0x11c>
				HAL_GPIO_WritePin(GPIOB, PED0_Pin, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	2110      	movs	r1, #16
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <pedestrian_fsm+0x12c>)
 800090c:	f001 f931 	bl	8001b72 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, PED1_Pin, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	2120      	movs	r1, #32
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <pedestrian_fsm+0x12c>)
 8000916:	f001 f92c 	bl	8001b72 <HAL_GPIO_WritePin>
				pedestrianFlag = 0;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <pedestrian_fsm+0x124>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
				PWM = 0;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <pedestrian_fsm+0x14c>)
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
			}
			break;
 8000926:	e001      	b.n	800092c <pedestrian_fsm+0x11c>
		}
	}
 8000928:	bf00      	nop
 800092a:	e000      	b.n	800092e <pedestrian_fsm+0x11e>
			break;
 800092c:	bf00      	nop
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000108 	.word	0x20000108
 8000938:	20000100 	.word	0x20000100
 800093c:	40010c00 	.word	0x40010c00
 8000940:	2000001c 	.word	0x2000001c
 8000944:	080045fc 	.word	0x080045fc
 8000948:	2000010c 	.word	0x2000010c
 800094c:	200001b0 	.word	0x200001b0
 8000950:	08004608 	.word	0x08004608
 8000954:	08004614 	.word	0x08004614
 8000958:	08004620 	.word	0x08004620
 800095c:	200001f4 	.word	0x200001f4
 8000960:	20000168 	.word	0x20000168

08000964 <SCH_init>:
#include "main.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t currentID = 0;

void SCH_init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id=0; id<SCH_MAX_TASKS; id++) {
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e006      	b.n	800097e <SCH_init+0x1a>
		SCH_delete_task(id);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f8f8 	bl	8000b68 <SCH_delete_task>
	for (id=0; id<SCH_MAX_TASKS; id++) {
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	3301      	adds	r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b27      	cmp	r3, #39	; 0x27
 8000982:	d9f5      	bls.n	8000970 <SCH_init+0xc>
	}
	currentID = 0;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <SCH_init+0x30>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
//	error_code_G = 0;
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000478 	.word	0x20000478

08000998 <SCH_update>:

void SCH_update(void) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id=0; id<currentID; id++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e042      	b.n	8000a2a <SCH_update+0x92>
		if (SCH_tasks_G[id].pTask) {
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <SCH_update+0xa8>)
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d038      	beq.n	8000a24 <SCH_update+0x8c>
			if (SCH_tasks_G[id].delay==0) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a22      	ldr	r2, [pc, #136]	; (8000a40 <SCH_update+0xa8>)
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	4413      	add	r3, r2
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d123      	bne.n	8000a0a <SCH_update+0x72>
				SCH_tasks_G[id].runMe += 1;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <SCH_update+0xa8>)
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	4413      	add	r3, r2
 80009ca:	330c      	adds	r3, #12
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	3201      	adds	r2, #1
 80009d2:	b2d1      	uxtb	r1, r2
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <SCH_update+0xa8>)
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	4413      	add	r3, r2
 80009da:	330c      	adds	r3, #12
 80009dc:	460a      	mov	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[id].period)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <SCH_update+0xa8>)
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	4413      	add	r3, r2
 80009e8:	3308      	adds	r3, #8
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d019      	beq.n	8000a24 <SCH_update+0x8c>
					SCH_tasks_G[id].delay = SCH_tasks_G[id].period;
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4912      	ldr	r1, [pc, #72]	; (8000a40 <SCH_update+0xa8>)
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	440a      	add	r2, r1
 80009fa:	3208      	adds	r2, #8
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	4910      	ldr	r1, [pc, #64]	; (8000a40 <SCH_update+0xa8>)
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	440b      	add	r3, r1
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e00c      	b.n	8000a24 <SCH_update+0x8c>
				else ;
			}
			else
				SCH_tasks_G[id].delay -= 1;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <SCH_update+0xa8>)
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	4413      	add	r3, r2
 8000a12:	3304      	adds	r3, #4
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	4909      	ldr	r1, [pc, #36]	; (8000a40 <SCH_update+0xa8>)
 8000a1c:	011b      	lsls	r3, r3, #4
 8000a1e:	440b      	add	r3, r1
 8000a20:	3304      	adds	r3, #4
 8000a22:	601a      	str	r2, [r3, #0]
	for (id=0; id<currentID; id++) {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	3301      	adds	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SCH_update+0xac>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d3b7      	bcc.n	80009a4 <SCH_update+0xc>
		}
	}
}
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	200001f8 	.word	0x200001f8
 8000a44:	20000478 	.word	0x20000478

08000a48 <SCH_add_task>:

uint8_t SCH_add_task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	uint8_t id = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75fb      	strb	r3, [r7, #23]
	while ( (SCH_tasks_G[id].pTask != 0) && (id < SCH_MAX_TASKS) )
 8000a58:	e002      	b.n	8000a60 <SCH_add_task+0x18>
		id++;
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	75fb      	strb	r3, [r7, #23]
	while ( (SCH_tasks_G[id].pTask != 0) && (id < SCH_MAX_TASKS) )
 8000a60:	7dfb      	ldrb	r3, [r7, #23]
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <SCH_add_task+0x98>)
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	4413      	add	r3, r2
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <SCH_add_task+0x2c>
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	2b27      	cmp	r3, #39	; 0x27
 8000a72:	d9f2      	bls.n	8000a5a <SCH_add_task+0x12>
	if (id==SCH_MAX_TASKS)
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	2b28      	cmp	r3, #40	; 0x28
 8000a78:	d101      	bne.n	8000a7e <SCH_add_task+0x36>
		return SCH_MAX_TASKS;
 8000a7a:	2328      	movs	r3, #40	; 0x28
 8000a7c:	e02a      	b.n	8000ad4 <SCH_add_task+0x8c>
	SCH_tasks_G[id].pTask = pFunction;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <SCH_add_task+0x98>)
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	4413      	add	r3, r2
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].delay = DELAY;
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <SCH_add_task+0x98>)
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	4413      	add	r3, r2
 8000a92:	3304      	adds	r3, #4
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].period = PERIOD;
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <SCH_add_task+0x98>)
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	4413      	add	r3, r2
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[id].runMe = 0;
 8000aa6:	7dfb      	ldrb	r3, [r7, #23]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <SCH_add_task+0x98>)
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	4413      	add	r3, r2
 8000aae:	330c      	adds	r3, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[id].taskID = currentID;
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <SCH_add_task+0x9c>)
 8000ab8:	7811      	ldrb	r1, [r2, #0]
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <SCH_add_task+0x98>)
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	4413      	add	r3, r2
 8000ac0:	330d      	adds	r3, #13
 8000ac2:	460a      	mov	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
	currentID += 1;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <SCH_add_task+0x9c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SCH_add_task+0x9c>)
 8000ad0:	701a      	strb	r2, [r3, #0]
//	noTasks++;
	return id;
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200001f8 	.word	0x200001f8
 8000ae4:	20000478 	.word	0x20000478

08000ae8 <SCH_dispatch_tasks>:

void SCH_dispatch_tasks(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	uint8_t id;
	for (id = 0; id<currentID; id++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e02b      	b.n	8000b4c <SCH_dispatch_tasks+0x64>
		if (SCH_tasks_G[id].runMe>0) {
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <SCH_dispatch_tasks+0x78>)
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	4413      	add	r3, r2
 8000afc:	330c      	adds	r3, #12
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d020      	beq.n	8000b46 <SCH_dispatch_tasks+0x5e>
			(*SCH_tasks_G[id].pTask)();
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <SCH_dispatch_tasks+0x78>)
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	4413      	add	r3, r2
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4798      	blx	r3
			SCH_tasks_G[id].runMe -= 1;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <SCH_dispatch_tasks+0x78>)
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	4413      	add	r3, r2
 8000b18:	330c      	adds	r3, #12
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	3a01      	subs	r2, #1
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <SCH_dispatch_tasks+0x78>)
 8000b24:	011b      	lsls	r3, r3, #4
 8000b26:	4413      	add	r3, r2
 8000b28:	330c      	adds	r3, #12
 8000b2a:	460a      	mov	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[id].period==0)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <SCH_dispatch_tasks+0x78>)
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	4413      	add	r3, r2
 8000b36:	3308      	adds	r3, #8
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <SCH_dispatch_tasks+0x5e>
				SCH_delete_task(id);
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f811 	bl	8000b68 <SCH_delete_task>
	for (id = 0; id<currentID; id++) {
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SCH_dispatch_tasks+0x7c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3ce      	bcc.n	8000af4 <SCH_dispatch_tasks+0xc>
		}
	}
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200001f8 	.word	0x200001f8
 8000b64:	20000478 	.word	0x20000478

08000b68 <SCH_delete_task>:

uint8_t SCH_delete_task(const uint8_t ID) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if (ID>currentID)
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <SCH_delete_task+0x90>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d901      	bls.n	8000b80 <SCH_delete_task+0x18>
		return ID;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	e036      	b.n	8000bee <SCH_delete_task+0x86>
	SCH_tasks_G[ID].delay = 0;
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <SCH_delete_task+0x94>)
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	4413      	add	r3, r2
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].pTask = 0x0000;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <SCH_delete_task+0x94>)
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4413      	add	r3, r2
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].delay = 0;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <SCH_delete_task+0x94>)
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4413      	add	r3, r2
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[ID].runMe = 0;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <SCH_delete_task+0x94>)
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	4413      	add	r3, r2
 8000bb0:	330c      	adds	r3, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	for (uint8_t id = ID+1; id<currentID; id++)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e011      	b.n	8000be2 <SCH_delete_task+0x7a>
		SCH_tasks_G[id].taskID -= 1;
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <SCH_delete_task+0x94>)
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	4413      	add	r3, r2
 8000bc6:	330d      	adds	r3, #13
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	b2d1      	uxtb	r1, r2
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SCH_delete_task+0x94>)
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	330d      	adds	r3, #13
 8000bd8:	460a      	mov	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
	for (uint8_t id = ID+1; id<currentID; id++)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	3301      	adds	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SCH_delete_task+0x90>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3e8      	bcc.n	8000bbe <SCH_delete_task+0x56>
//	noTasks--;
	return ID;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000478 	.word	0x20000478
 8000bfc:	200001f8 	.word	0x200001f8

08000c00 <set_timer0>:
int timer0Flag = 0;
int timer0Counter = 0;
int timer1Flag = 0;
int timer1Counter = 0;

void set_timer0(int duration) {
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	timer0Counter = duration;
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <set_timer0+0x20>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
	timer0Flag = 0;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <set_timer0+0x24>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000480 	.word	0x20000480
 8000c24:	2000047c 	.word	0x2000047c

08000c28 <set_timer1>:

void set_timer1(int duration) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	timer1Counter = duration;
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <set_timer1+0x20>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
	timer1Flag = 0;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <set_timer1+0x24>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000488 	.word	0x20000488
 8000c4c:	20000484 	.word	0x20000484

08000c50 <timer_run>:

void timer_run() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	if (timer0Counter>0) {
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <timer_run+0x54>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd0e      	ble.n	8000c7a <timer_run+0x2a>
		timer0Counter--;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <timer_run+0x54>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <timer_run+0x54>)
 8000c64:	6013      	str	r3, [r2, #0]
		if (timer0Counter==0) {
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <timer_run+0x54>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <timer_run+0x2a>
			timer0Flag = 1;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <timer_run+0x58>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
			set_timer0(50);
 8000c74:	2032      	movs	r0, #50	; 0x32
 8000c76:	f7ff ffc3 	bl	8000c00 <set_timer0>
		}
	}
	if (timer1Counter>0) {
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <timer_run+0x5c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	dd0e      	ble.n	8000ca0 <timer_run+0x50>
		timer1Counter--;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <timer_run+0x5c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a08      	ldr	r2, [pc, #32]	; (8000cac <timer_run+0x5c>)
 8000c8a:	6013      	str	r3, [r2, #0]
		if (timer1Counter==0) {
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <timer_run+0x5c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <timer_run+0x50>
			timer1Flag = 1;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <timer_run+0x60>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
			set_timer1(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ffc4 	bl	8000c28 <set_timer1>
		}
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000480 	.word	0x20000480
 8000ca8:	2000047c 	.word	0x2000047c
 8000cac:	20000488 	.word	0x20000488
 8000cb0:	20000484 	.word	0x20000484

08000cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_MspInit+0x5c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x5c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x60>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_MspInit+0x60>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000

08000d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d114      	bne.n	8000d54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	201c      	movs	r0, #28
 8000d48:	f000 fca5 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d4c:	201c      	movs	r0, #28
 8000d4e:	f000 fcbe 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d52:	e018      	b.n	8000d86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <HAL_TIM_Base_MspInit+0x7c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d113      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_TIM_Base_MspInit+0x78>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201d      	movs	r0, #29
 8000d7c:	f000 fc8b 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d80:	201d      	movs	r0, #29
 8000d82:	f000 fca4 	bl	80016ce <HAL_NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40000400 	.word	0x40000400

08000d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_TIM_MspPostInit+0x58>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d117      	bne.n	8000de8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_TIM_MspPostInit+0x5c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_TIM_MspPostInit+0x5c>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_TIM_MspPostInit+0x5c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_TIM_MspPostInit+0x60>)
 8000de4:	f000 fd32 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010800 	.word	0x40010800

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_UART_MspInit+0x98>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d137      	bne.n	8000e8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	61d3      	str	r3, [r2, #28]
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <HAL_UART_MspInit+0xa0>)
 8000e60:	f000 fcf4 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e64:	2308      	movs	r3, #8
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_UART_MspInit+0xa0>)
 8000e78:	f000 fce8 	bl	800184c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2026      	movs	r0, #38	; 0x26
 8000e82:	f000 fc08 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e86:	2026      	movs	r0, #38	; 0x26
 8000e88:	f000 fc21 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <HAL_InitTick+0xd0>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <HAL_InitTick+0xd0>)
 8000ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_InitTick+0xd0>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 fa5f 	bl	800239c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ede:	f001 fa49 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8000ee2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_InitTick+0xd4>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	0c9b      	lsrs	r3, r3, #18
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_InitTick+0xd8>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <HAL_InitTick+0xdc>)
 8000ef6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_InitTick+0xd8>)
 8000efa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f18:	4817      	ldr	r0, [pc, #92]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f1a:	f001 fa8d 	bl	8002438 <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d11b      	bne.n	8000f64 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <HAL_InitTick+0xd8>)
 8000f2e:	f001 fad3 	bl	80024d8 <HAL_TIM_Base_Start_IT>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d111      	bne.n	8000f64 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f40:	2019      	movs	r0, #25
 8000f42:	f000 fbc4 	bl	80016ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d808      	bhi.n	8000f5e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	2019      	movs	r0, #25
 8000f52:	f000 fba0 	bl	8001696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0xe0>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e002      	b.n	8000f64 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	431bde83 	.word	0x431bde83
 8000f78:	2000048c 	.word	0x2000048c
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	20000024 	.word	0x20000024

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
	...

08000fd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM1_UP_IRQHandler+0x10>)
 8000fda:	f001 fbbd 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000048c 	.word	0x2000048c

08000fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <TIM2_IRQHandler+0x10>)
 8000fee:	f001 fbb3 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000120 	.word	0x20000120

08000ffc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM3_IRQHandler+0x10>)
 8001002:	f001 fba9 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000168 	.word	0x20000168

08001010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <USART2_IRQHandler+0x10>)
 8001016:	f002 fa31 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200001b0 	.word	0x200001b0

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f002 fe0a 	bl	8003c6c <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20002800 	.word	0x20002800
 8001084:	00000400 	.word	0x00000400
 8001088:	200004d4 	.word	0x200004d4
 800108c:	200004f0 	.word	0x200004f0

08001090 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <fsm_auto>:
 *      Author: loing
 */

#include "task.h"

void fsm_auto() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
//	if (timer0Flag == 1) {
	if (currentMode == AUTO) {
 80010a0:	4b50      	ldr	r3, [pc, #320]	; (80011e4 <fsm_auto+0x148>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 8099 	bne.w	80011dc <fsm_auto+0x140>
		switch (state) {
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <fsm_auto+0x14c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	f200 8095 	bhi.w	80011de <fsm_auto+0x142>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <fsm_auto+0x20>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001155 	.word	0x08001155
 80010c8:	08001199 	.word	0x08001199
		case STATE0:
			sprintf(msg, "AUTO0: %d\r\n", currentTick);
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <fsm_auto+0x150>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4947      	ldr	r1, [pc, #284]	; (80011f0 <fsm_auto+0x154>)
 80010d4:	4847      	ldr	r0, [pc, #284]	; (80011f4 <fsm_auto+0x158>)
 80010d6:	f002 fdfb 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80010da:	2332      	movs	r3, #50	; 0x32
 80010dc:	2214      	movs	r2, #20
 80010de:	4945      	ldr	r1, [pc, #276]	; (80011f4 <fsm_auto+0x158>)
 80010e0:	4845      	ldr	r0, [pc, #276]	; (80011f8 <fsm_auto+0x15c>)
 80010e2:	f002 f938 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2101      	movs	r1, #1
 80010ea:	4844      	ldr	r0, [pc, #272]	; (80011fc <fsm_auto+0x160>)
 80010ec:	f000 fd41 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2102      	movs	r1, #2
 80010f4:	4841      	ldr	r0, [pc, #260]	; (80011fc <fsm_auto+0x160>)
 80010f6:	f000 fd3c 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2104      	movs	r1, #4
 80010fe:	483f      	ldr	r0, [pc, #252]	; (80011fc <fsm_auto+0x160>)
 8001100:	f000 fd37 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	483c      	ldr	r0, [pc, #240]	; (80011fc <fsm_auto+0x160>)
 800110a:	f000 fd32 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 800110e:	e066      	b.n	80011de <fsm_auto+0x142>
		case STATE1:
			sprintf(msg, "AUTO1: %d\r\n", currentTick);
 8001110:	4b36      	ldr	r3, [pc, #216]	; (80011ec <fsm_auto+0x150>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	493a      	ldr	r1, [pc, #232]	; (8001200 <fsm_auto+0x164>)
 8001118:	4836      	ldr	r0, [pc, #216]	; (80011f4 <fsm_auto+0x158>)
 800111a:	f002 fdd9 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	2214      	movs	r2, #20
 8001122:	4934      	ldr	r1, [pc, #208]	; (80011f4 <fsm_auto+0x158>)
 8001124:	4834      	ldr	r0, [pc, #208]	; (80011f8 <fsm_auto+0x15c>)
 8001126:	f002 f916 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 1);
 800112a:	2201      	movs	r2, #1
 800112c:	2101      	movs	r1, #1
 800112e:	4833      	ldr	r0, [pc, #204]	; (80011fc <fsm_auto+0x160>)
 8001130:	f000 fd1f 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2102      	movs	r1, #2
 8001138:	4830      	ldr	r0, [pc, #192]	; (80011fc <fsm_auto+0x160>)
 800113a:	f000 fd1a 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2104      	movs	r1, #4
 8001142:	482e      	ldr	r0, [pc, #184]	; (80011fc <fsm_auto+0x160>)
 8001144:	f000 fd15 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2108      	movs	r1, #8
 800114c:	482b      	ldr	r0, [pc, #172]	; (80011fc <fsm_auto+0x160>)
 800114e:	f000 fd10 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 8001152:	e044      	b.n	80011de <fsm_auto+0x142>
		case STATE2:
			sprintf(msg, "AUTO2: %d\r\n", currentTick);
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <fsm_auto+0x150>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	492a      	ldr	r1, [pc, #168]	; (8001204 <fsm_auto+0x168>)
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <fsm_auto+0x158>)
 800115e:	f002 fdb7 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 8001162:	2332      	movs	r3, #50	; 0x32
 8001164:	2214      	movs	r2, #20
 8001166:	4923      	ldr	r1, [pc, #140]	; (80011f4 <fsm_auto+0x158>)
 8001168:	4823      	ldr	r0, [pc, #140]	; (80011f8 <fsm_auto+0x15c>)
 800116a:	f002 f8f4 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2101      	movs	r1, #1
 8001172:	4822      	ldr	r0, [pc, #136]	; (80011fc <fsm_auto+0x160>)
 8001174:	f000 fcfd 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	2102      	movs	r1, #2
 800117c:	481f      	ldr	r0, [pc, #124]	; (80011fc <fsm_auto+0x160>)
 800117e:	f000 fcf8 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	2104      	movs	r1, #4
 8001186:	481d      	ldr	r0, [pc, #116]	; (80011fc <fsm_auto+0x160>)
 8001188:	f000 fcf3 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2108      	movs	r1, #8
 8001190:	481a      	ldr	r0, [pc, #104]	; (80011fc <fsm_auto+0x160>)
 8001192:	f000 fcee 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 8001196:	e022      	b.n	80011de <fsm_auto+0x142>
		case STATE3:
			sprintf(msg, "AUTO3: %d\r\n", currentTick);
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <fsm_auto+0x150>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	491a      	ldr	r1, [pc, #104]	; (8001208 <fsm_auto+0x16c>)
 80011a0:	4814      	ldr	r0, [pc, #80]	; (80011f4 <fsm_auto+0x158>)
 80011a2:	f002 fd95 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80011a6:	2332      	movs	r3, #50	; 0x32
 80011a8:	2214      	movs	r2, #20
 80011aa:	4912      	ldr	r1, [pc, #72]	; (80011f4 <fsm_auto+0x158>)
 80011ac:	4812      	ldr	r0, [pc, #72]	; (80011f8 <fsm_auto+0x15c>)
 80011ae:	f002 f8d2 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2101      	movs	r1, #1
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <fsm_auto+0x160>)
 80011b8:	f000 fcdb 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	2102      	movs	r1, #2
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <fsm_auto+0x160>)
 80011c2:	f000 fcd6 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2104      	movs	r1, #4
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <fsm_auto+0x160>)
 80011cc:	f000 fcd1 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2108      	movs	r1, #8
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <fsm_auto+0x160>)
 80011d6:	f000 fccc 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 80011da:	e000      	b.n	80011de <fsm_auto+0x142>
		}
	}
 80011dc:	bf00      	nop

//	}
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000fc 	.word	0x200000fc
 80011e8:	20000100 	.word	0x20000100
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	0800462c 	.word	0x0800462c
 80011f4:	2000010c 	.word	0x2000010c
 80011f8:	200001b0 	.word	0x200001b0
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	08004638 	.word	0x08004638
 8001204:	08004644 	.word	0x08004644
 8001208:	08004650 	.word	0x08004650

0800120c <fsm_mode>:

void fsm_mode() {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
//	if (timer0Flag == 1) {
	if (currentMode == MODIFIED) {
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <fsm_mode+0xf4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d170      	bne.n	80012fa <fsm_mode+0xee>
		switch (state) {
 8001218:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <fsm_mode+0xf8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d04a      	beq.n	80012b6 <fsm_mode+0xaa>
 8001220:	2b07      	cmp	r3, #7
 8001222:	dc6b      	bgt.n	80012fc <fsm_mode+0xf0>
 8001224:	2b05      	cmp	r3, #5
 8001226:	d002      	beq.n	800122e <fsm_mode+0x22>
 8001228:	2b06      	cmp	r3, #6
 800122a:	d022      	beq.n	8001272 <fsm_mode+0x66>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 1);
			break;
		}
	}
//	}
}
 800122c:	e066      	b.n	80012fc <fsm_mode+0xf0>
			sprintf(msg, "RED: %d\r\n", tempDuration);
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <fsm_mode+0xfc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4935      	ldr	r1, [pc, #212]	; (800130c <fsm_mode+0x100>)
 8001236:	4836      	ldr	r0, [pc, #216]	; (8001310 <fsm_mode+0x104>)
 8001238:	f002 fd4a 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 800123c:	2332      	movs	r3, #50	; 0x32
 800123e:	2214      	movs	r2, #20
 8001240:	4933      	ldr	r1, [pc, #204]	; (8001310 <fsm_mode+0x104>)
 8001242:	4834      	ldr	r0, [pc, #208]	; (8001314 <fsm_mode+0x108>)
 8001244:	f002 f887 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	2101      	movs	r1, #1
 800124c:	4832      	ldr	r0, [pc, #200]	; (8001318 <fsm_mode+0x10c>)
 800124e:	f000 fc90 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	4830      	ldr	r0, [pc, #192]	; (8001318 <fsm_mode+0x10c>)
 8001258:	f000 fc8b 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	2104      	movs	r1, #4
 8001260:	482d      	ldr	r0, [pc, #180]	; (8001318 <fsm_mode+0x10c>)
 8001262:	f000 fc86 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2108      	movs	r1, #8
 800126a:	482b      	ldr	r0, [pc, #172]	; (8001318 <fsm_mode+0x10c>)
 800126c:	f000 fc81 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 8001270:	e044      	b.n	80012fc <fsm_mode+0xf0>
			sprintf(msg, "GREEN: %d\r\n", tempDuration);
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <fsm_mode+0xfc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4928      	ldr	r1, [pc, #160]	; (800131c <fsm_mode+0x110>)
 800127a:	4825      	ldr	r0, [pc, #148]	; (8001310 <fsm_mode+0x104>)
 800127c:	f002 fd28 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 8001280:	2332      	movs	r3, #50	; 0x32
 8001282:	2214      	movs	r2, #20
 8001284:	4922      	ldr	r1, [pc, #136]	; (8001310 <fsm_mode+0x104>)
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <fsm_mode+0x108>)
 8001288:	f002 f865 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2101      	movs	r1, #1
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <fsm_mode+0x10c>)
 8001292:	f000 fc6e 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <fsm_mode+0x10c>)
 800129c:	f000 fc69 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2104      	movs	r1, #4
 80012a4:	481c      	ldr	r0, [pc, #112]	; (8001318 <fsm_mode+0x10c>)
 80012a6:	f000 fc64 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2108      	movs	r1, #8
 80012ae:	481a      	ldr	r0, [pc, #104]	; (8001318 <fsm_mode+0x10c>)
 80012b0:	f000 fc5f 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 80012b4:	e022      	b.n	80012fc <fsm_mode+0xf0>
			sprintf(msg, "YELLOW: %d\r\n", tempDuration);
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <fsm_mode+0xfc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4918      	ldr	r1, [pc, #96]	; (8001320 <fsm_mode+0x114>)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <fsm_mode+0x104>)
 80012c0:	f002 fd06 	bl	8003cd0 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, sizeof(msg), 50);
 80012c4:	2332      	movs	r3, #50	; 0x32
 80012c6:	2214      	movs	r2, #20
 80012c8:	4911      	ldr	r1, [pc, #68]	; (8001310 <fsm_mode+0x104>)
 80012ca:	4812      	ldr	r0, [pc, #72]	; (8001314 <fsm_mode+0x108>)
 80012cc:	f002 f843 	bl	8003356 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, Led_11_Pin, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2101      	movs	r1, #1
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <fsm_mode+0x10c>)
 80012d6:	f000 fc4c 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_12_Pin, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	2102      	movs	r1, #2
 80012de:	480e      	ldr	r0, [pc, #56]	; (8001318 <fsm_mode+0x10c>)
 80012e0:	f000 fc47 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_21_Pin, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2104      	movs	r1, #4
 80012e8:	480b      	ldr	r0, [pc, #44]	; (8001318 <fsm_mode+0x10c>)
 80012ea:	f000 fc42 	bl	8001b72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led_22_Pin, 1);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2108      	movs	r1, #8
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <fsm_mode+0x10c>)
 80012f4:	f000 fc3d 	bl	8001b72 <HAL_GPIO_WritePin>
			break;
 80012f8:	e000      	b.n	80012fc <fsm_mode+0xf0>
	}
 80012fa:	bf00      	nop
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000fc 	.word	0x200000fc
 8001304:	20000100 	.word	0x20000100
 8001308:	20000104 	.word	0x20000104
 800130c:	0800465c 	.word	0x0800465c
 8001310:	2000010c 	.word	0x2000010c
 8001314:	200001b0 	.word	0x200001b0
 8001318:	40010c00 	.word	0x40010c00
 800131c:	08004668 	.word	0x08004668
 8001320:	08004674 	.word	0x08004674

08001324 <fsm>:

void fsm() {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	fsm_auto();
 8001328:	f7ff feb8 	bl	800109c <fsm_auto>
	fsm_mode();
 800132c:	f7ff ff6e 	bl	800120c <fsm_mode>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <init_task>:

void init_task() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
	void (*pTask1)(void);
	void (*pTask2)(void);
	void (*pTask3)(void);
	void (*pTask4)(void);

	pTask0 = getKeyInput;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <init_task+0x54>)
 800133c:	617b      	str	r3, [r7, #20]
	pTask1 = update_state;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <init_task+0x58>)
 8001340:	613b      	str	r3, [r7, #16]
	pTask2 = fsm;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <init_task+0x5c>)
 8001344:	60fb      	str	r3, [r7, #12]
	pTask3 = timer_run;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <init_task+0x60>)
 8001348:	60bb      	str	r3, [r7, #8]
	pTask4 = pedestrian_fsm;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <init_task+0x64>)
 800134c:	607b      	str	r3, [r7, #4]

	SCH_add_task(pTask3, 1, 10);
 800134e:	220a      	movs	r2, #10
 8001350:	2101      	movs	r1, #1
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff fb78 	bl	8000a48 <SCH_add_task>
	SCH_add_task(pTask0, 1, 10);
 8001358:	220a      	movs	r2, #10
 800135a:	2101      	movs	r1, #1
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff fb73 	bl	8000a48 <SCH_add_task>
	SCH_add_task(pTask1, 1, 10);
 8001362:	220a      	movs	r2, #10
 8001364:	2101      	movs	r1, #1
 8001366:	6938      	ldr	r0, [r7, #16]
 8001368:	f7ff fb6e 	bl	8000a48 <SCH_add_task>
	SCH_add_task(pTask2, 2, 100);
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	2102      	movs	r1, #2
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fb69 	bl	8000a48 <SCH_add_task>
	SCH_add_task(pTask4, 1, 50);
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	2101      	movs	r1, #1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fb64 	bl	8000a48 <SCH_add_task>
}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	080002ed 	.word	0x080002ed
 800138c:	0800139d 	.word	0x0800139d
 8001390:	08001325 	.word	0x08001325
 8001394:	08000c51 	.word	0x08000c51
 8001398:	08000811 	.word	0x08000811

0800139c <update_state>:

void update_state() {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
//	if (timer1Flag == 1) {
		currentTick--;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <update_state+0xd0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4a31      	ldr	r2, [pc, #196]	; (800146c <update_state+0xd0>)
 80013a8:	6013      	str	r3, [r2, #0]
		if (currentMode == AUTO) {
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <update_state+0xd4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d13e      	bne.n	8001430 <update_state+0x94>
			switch (state) {
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <update_state+0xd8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d854      	bhi.n	8001464 <update_state+0xc8>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <update_state+0x24>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013e9 	.word	0x080013e9
 80013c8:	08001401 	.word	0x08001401
 80013cc:	08001419 	.word	0x08001419
			case STATE0:
				if (currentTick == 0){
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <update_state+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d13e      	bne.n	8001456 <update_state+0xba>
					currentTick = pivot[1];
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <update_state+0xdc>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <update_state+0xd0>)
 80013de:	6013      	str	r3, [r2, #0]
					state = STATE1;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <update_state+0xd8>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
				}
				break;
 80013e6:	e036      	b.n	8001456 <update_state+0xba>
			case STATE1:
				if (currentTick == 0){
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <update_state+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d134      	bne.n	800145a <update_state+0xbe>
					currentTick = pivot[2];
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <update_state+0xdc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <update_state+0xd0>)
 80013f6:	6013      	str	r3, [r2, #0]
					state = STATE2;
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <update_state+0xd8>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
				}
				break;
 80013fe:	e02c      	b.n	800145a <update_state+0xbe>
			case STATE2:
				if (currentTick == 0) {
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <update_state+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d12a      	bne.n	800145e <update_state+0xc2>
					currentTick = pivot[3];
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <update_state+0xdc>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <update_state+0xd0>)
 800140e:	6013      	str	r3, [r2, #0]
					state = STATE3;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <update_state+0xd8>)
 8001412:	2203      	movs	r2, #3
 8001414:	601a      	str	r2, [r3, #0]
				}
				break;
 8001416:	e022      	b.n	800145e <update_state+0xc2>
			case STATE3:
				if (currentTick == 0) {
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <update_state+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d120      	bne.n	8001462 <update_state+0xc6>
					currentTick = pivot[0];
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <update_state+0xdc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <update_state+0xd0>)
 8001426:	6013      	str	r3, [r2, #0]
					state = STATE0;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <update_state+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
				}
				break;
 800142e:	e018      	b.n	8001462 <update_state+0xc6>
			}
		}
		else if (currentMode == MODIFIED) {
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <update_state+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d115      	bne.n	8001464 <update_state+0xc8>
			if (currentTick == 0) {
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <update_state+0xd0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d111      	bne.n	8001464 <update_state+0xc8>
				currentTick = pivot[0];
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <update_state+0xdc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <update_state+0xd0>)
 8001446:	6013      	str	r3, [r2, #0]
				currentMode = AUTO;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <update_state+0xd4>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
				state = STATE0;
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <update_state+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
			}
		}
//	}
}
 8001454:	e006      	b.n	8001464 <update_state+0xc8>
				break;
 8001456:	bf00      	nop
 8001458:	e004      	b.n	8001464 <update_state+0xc8>
				break;
 800145a:	bf00      	nop
 800145c:	e002      	b.n	8001464 <update_state+0xc8>
				break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <update_state+0xc8>
				break;
 8001462:	bf00      	nop
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	2000001c 	.word	0x2000001c
 8001470:	200000fc 	.word	0x200000fc
 8001474:	20000100 	.word	0x20000100
 8001478:	20000000 	.word	0x20000000

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff fdf5 	bl	8001090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f002 fbe7 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7fe ffe7 	bl	800047c <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80014b8:	080046e8 	.word	0x080046e8
  ldr r2, =_sbss
 80014bc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80014c0:	200004ec 	.word	0x200004ec

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f8d1 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f7ff fcde 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fbe6 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_IncTick+0x1c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_IncTick+0x20>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_IncTick+0x20>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000028 	.word	0x20000028
 8001514:	200004d8 	.word	0x200004d8

08001518 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <HAL_GetTick+0x10>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	200004d8 	.word	0x200004d8

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4906      	ldr	r1, [pc, #24]	; (80015c4 <__NVIC_EnableIRQ+0x34>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff4f 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff64 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ffb2 	bl	800161c <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff81 	bl	80015c8 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff57 	bl	8001590 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d008      	beq.n	8001712 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e020      	b.n	8001754 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 020e 	bic.w	r2, r2, #14
 8001720:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001752:	7bfb      	ldrb	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
	...

08001760 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001772:	2b02      	cmp	r3, #2
 8001774:	d005      	beq.n	8001782 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2204      	movs	r2, #4
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e051      	b.n	8001826 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020e 	bic.w	r2, r2, #14
 8001790:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a22      	ldr	r2, [pc, #136]	; (8001830 <HAL_DMA_Abort_IT+0xd0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d029      	beq.n	8001800 <HAL_DMA_Abort_IT+0xa0>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <HAL_DMA_Abort_IT+0xd4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d022      	beq.n	80017fc <HAL_DMA_Abort_IT+0x9c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <HAL_DMA_Abort_IT+0xd8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d01a      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x96>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <HAL_DMA_Abort_IT+0xdc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d012      	beq.n	80017f0 <HAL_DMA_Abort_IT+0x90>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_DMA_Abort_IT+0xe0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00a      	beq.n	80017ea <HAL_DMA_Abort_IT+0x8a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_DMA_Abort_IT+0xe4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <HAL_DMA_Abort_IT+0x84>
 80017de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017e2:	e00e      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 80017e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e8:	e00b      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 80017ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ee:	e008      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	e005      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	e002      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 80017fc:	2310      	movs	r3, #16
 80017fe:	e000      	b.n	8001802 <HAL_DMA_Abort_IT+0xa2>
 8001800:	2301      	movs	r3, #1
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_DMA_Abort_IT+0xe8>)
 8001804:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    } 
  }
  return status;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020008 	.word	0x40020008
 8001834:	4002001c 	.word	0x4002001c
 8001838:	40020030 	.word	0x40020030
 800183c:	40020044 	.word	0x40020044
 8001840:	40020058 	.word	0x40020058
 8001844:	4002006c 	.word	0x4002006c
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e161      	b.n	8001b24 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8150 	bne.w	8001b1e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a97      	ldr	r2, [pc, #604]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d05e      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001888:	4a95      	ldr	r2, [pc, #596]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d875      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800188e:	4a95      	ldr	r2, [pc, #596]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d058      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 8001894:	4a93      	ldr	r2, [pc, #588]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d86f      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 800189a:	4a93      	ldr	r2, [pc, #588]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d052      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018a0:	4a91      	ldr	r2, [pc, #580]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d869      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018a6:	4a91      	ldr	r2, [pc, #580]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d04c      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018ac:	4a8f      	ldr	r2, [pc, #572]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d863      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018b2:	4a8f      	ldr	r2, [pc, #572]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d046      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
 80018b8:	4a8d      	ldr	r2, [pc, #564]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d85d      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d82a      	bhi.n	8001918 <HAL_GPIO_Init+0xcc>
 80018c2:	2b12      	cmp	r3, #18
 80018c4:	d859      	bhi.n	800197a <HAL_GPIO_Init+0x12e>
 80018c6:	a201      	add	r2, pc, #4	; (adr r2, 80018cc <HAL_GPIO_Init+0x80>)
 80018c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018cc:	08001947 	.word	0x08001947
 80018d0:	08001921 	.word	0x08001921
 80018d4:	08001933 	.word	0x08001933
 80018d8:	08001975 	.word	0x08001975
 80018dc:	0800197b 	.word	0x0800197b
 80018e0:	0800197b 	.word	0x0800197b
 80018e4:	0800197b 	.word	0x0800197b
 80018e8:	0800197b 	.word	0x0800197b
 80018ec:	0800197b 	.word	0x0800197b
 80018f0:	0800197b 	.word	0x0800197b
 80018f4:	0800197b 	.word	0x0800197b
 80018f8:	0800197b 	.word	0x0800197b
 80018fc:	0800197b 	.word	0x0800197b
 8001900:	0800197b 	.word	0x0800197b
 8001904:	0800197b 	.word	0x0800197b
 8001908:	0800197b 	.word	0x0800197b
 800190c:	0800197b 	.word	0x0800197b
 8001910:	08001929 	.word	0x08001929
 8001914:	0800193d 	.word	0x0800193d
 8001918:	4a76      	ldr	r2, [pc, #472]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191e:	e02c      	b.n	800197a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e029      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	3304      	adds	r3, #4
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e024      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	3308      	adds	r3, #8
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e01f      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	330c      	adds	r3, #12
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e01a      	b.n	800197c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800194e:	2304      	movs	r3, #4
 8001950:	623b      	str	r3, [r7, #32]
          break;
 8001952:	e013      	b.n	800197c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	611a      	str	r2, [r3, #16]
          break;
 8001966:	e009      	b.n	800197c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	615a      	str	r2, [r3, #20]
          break;
 8001972:	e003      	b.n	800197c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x130>
          break;
 800197a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	d801      	bhi.n	8001986 <HAL_GPIO_Init+0x13a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e001      	b.n	800198a <HAL_GPIO_Init+0x13e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3304      	adds	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d802      	bhi.n	8001998 <HAL_GPIO_Init+0x14c>
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x152>
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3b08      	subs	r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	210f      	movs	r1, #15
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	6a39      	ldr	r1, [r7, #32]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80a9 	beq.w	8001b1e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_GPIO_Init+0x2b4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00d      	beq.n	8001a2c <HAL_GPIO_Init+0x1e0>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_GPIO_Init+0x2b8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d007      	beq.n	8001a28 <HAL_GPIO_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_GPIO_Init+0x2bc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a24:	2303      	movs	r3, #3
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1e2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	492b      	ldr	r1, [pc, #172]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4921      	ldr	r1, [pc, #132]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	491d      	ldr	r1, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4917      	ldr	r1, [pc, #92]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4913      	ldr	r1, [pc, #76]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01f      	beq.n	8001b10 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	490d      	ldr	r1, [pc, #52]	; (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
 8001adc:	e01f      	b.n	8001b1e <HAL_GPIO_Init+0x2d2>
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4909      	ldr	r1, [pc, #36]	; (8001b40 <HAL_GPIO_Init+0x2f4>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f47f ae96 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	372c      	adds	r7, #44	; 0x2c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	40010400 	.word	0x40010400

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	041a      	lsls	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	611a      	str	r2, [r3, #16]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e272      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 8087 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc4:	4b92      	ldr	r3, [pc, #584]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d00c      	beq.n	8001bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd0:	4b8f      	ldr	r3, [pc, #572]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d06c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d168      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e24c      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	4b80      	ldr	r3, [pc, #512]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7f      	ldr	r2, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e02e      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x98>
 8001c22:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b78      	ldr	r3, [pc, #480]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a77      	ldr	r2, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e01d      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0xbc>
 8001c46:	4b72      	ldr	r3, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a71      	ldr	r2, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0xd4>
 8001c60:	4b6b      	ldr	r3, [pc, #428]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a6a      	ldr	r2, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b68      	ldr	r3, [pc, #416]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a67      	ldr	r2, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc4a 	bl	8001518 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fc46 	bl	8001518 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e200      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0xe4>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc36 	bl	8001518 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc32 	bl	8001518 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1ec      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x10c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d063      	beq.n	8001da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cde:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1c0      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4939      	ldr	r1, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fbeb 	bl	8001518 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff fbe7 	bl	8001518 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1a1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fbca 	bl	8001518 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fbc6 	bl	8001518 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e180      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d019      	beq.n	8001dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fbaa 	bl	8001518 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fba6 	bl	8001518 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e160      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 fb08 	bl	80023fc <RCC_Delay>
 8001dec:	e01c      	b.n	8001e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fb90 	bl	8001518 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfa:	e00f      	b.n	8001e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fb8c 	bl	8001518 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d908      	bls.n	8001e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e146      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	42420000 	.word	0x42420000
 8001e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e9      	bne.n	8001dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a6 	beq.w	8001f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a87      	ldr	r2, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b85      	ldr	r3, [pc, #532]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b82      	ldr	r3, [pc, #520]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb4d 	bl	8001518 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff fb49 	bl	8001518 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b64      	cmp	r3, #100	; 0x64
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e103      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x4c8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x312>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e02d      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001ebe:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a66      	ldr	r2, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
 8001ed6:	e01c      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d10c      	bne.n	8001efa <HAL_RCC_OscConfig+0x356>
 8001ee0:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4a60      	ldr	r2, [pc, #384]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6213      	str	r3, [r2, #32]
 8001eec:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0x36e>
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a5a      	ldr	r2, [pc, #360]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 0301 	bic.w	r3, r3, #1
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	4b58      	ldr	r3, [pc, #352]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d015      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fafd 	bl	8001518 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff faf9 	bl	8001518 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0b1      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ee      	beq.n	8001f22 <HAL_RCC_OscConfig+0x37e>
 8001f44:	e014      	b.n	8001f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fae7 	bl	8001518 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fae3 	bl	8001518 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e09b      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d105      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d061      	beq.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d146      	bne.n	800202e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7ff fab7 	bl	8001518 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fae:	f7ff fab3 	bl	8001518 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e06d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4921      	ldr	r1, [pc, #132]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a19      	ldr	r1, [r3, #32]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fa87 	bl	8001518 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fa83 	bl	8001518 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e03d      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x46a>
 800202c:	e035      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fa70 	bl	8001518 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fa6c 	bl	8001518 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e026      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x498>
 800205a:	e01e      	b.n	800209a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e019      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x500>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0d0      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4965      	ldr	r1, [pc, #404]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b8      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800210e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800211c:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	494d      	ldr	r1, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d040      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d107      	bne.n	800215e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e07f      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e073      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06b      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f023 0203 	bic.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4936      	ldr	r1, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7ff f9be 	bl	8001518 <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7ff f9ba 	bl	8001518 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e053      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d210      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4922      	ldr	r1, [pc, #136]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e032      	b.n	800225e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002236:	f000 f821 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800223a:	4602      	mov	r2, r0
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	490a      	ldr	r1, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1c8>)
 8002248:	5ccb      	ldrb	r3, [r1, r3]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1cc>)
 8002250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1d0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe22 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08004694 	.word	0x08004694
 8002274:	20000020 	.word	0x20000020
 8002278:	20000024 	.word	0x20000024

0800227c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b490      	push	{r4, r7}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCC_GetSysClockFreq+0xac>)
 8002284:	1d3c      	adds	r4, r7, #4
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800228c:	f240 2301 	movw	r3, #513	; 0x201
 8002290:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x40>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x46>
 80022ba:	e02b      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022be:	623b      	str	r3, [r7, #32]
      break;
 80022c0:	e02b      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	0c9b      	lsrs	r3, r3, #18
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3328      	adds	r3, #40	; 0x28
 80022cc:	443b      	add	r3, r7
 80022ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d012      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0c5b      	lsrs	r3, r3, #17
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	3328      	adds	r3, #40	; 0x28
 80022ea:	443b      	add	r3, r7
 80022ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e004      	b.n	800230e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	623b      	str	r3, [r7, #32]
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002316:	623b      	str	r3, [r7, #32]
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	6a3b      	ldr	r3, [r7, #32]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bc90      	pop	{r4, r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	08004684 	.word	0x08004684
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	003d0900 	.word	0x003d0900

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCC_GetHCLKFreq+0x10>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000020 	.word	0x20000020

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002350:	f7ff fff2 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	080046a4 	.word	0x080046a4

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002378:	f7ff ffde 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	080046a4 	.word	0x080046a4

0800239c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	220f      	movs	r2, #15
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_RCC_GetClockConfig+0x58>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_RCC_GetClockConfig+0x58>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_GetClockConfig+0x58>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_GetClockConfig+0x58>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0207 	and.w	r2, r3, #7
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40022000 	.word	0x40022000

080023fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <RCC_Delay+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <RCC_Delay+0x38>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002418:	bf00      	nop
  }
  while (Delay --);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <RCC_Delay+0x1c>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000020 	.word	0x20000020
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fc5a 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 fc1c 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e035      	b.n	800255c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <HAL_TIM_Base_Start_IT+0x90>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d004      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_TIM_Base_Start_IT+0x94>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d010      	beq.n	800255a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	e007      	b.n	800255a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400

08002570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e041      	b.n	8002606 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f839 	bl	800260e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 fb80 	bl	8002cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_TIM_PWM_Start+0x24>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e022      	b.n	800268a <HAL_TIM_PWM_Start+0x6a>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b04      	cmp	r3, #4
 8002648:	d109      	bne.n	800265e <HAL_TIM_PWM_Start+0x3e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e015      	b.n	800268a <HAL_TIM_PWM_Start+0x6a>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d109      	bne.n	8002678 <HAL_TIM_PWM_Start+0x58>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e008      	b.n	800268a <HAL_TIM_PWM_Start+0x6a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e059      	b.n	8002746 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_PWM_Start+0x82>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a0:	e013      	b.n	80026ca <HAL_TIM_PWM_Start+0xaa>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x92>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b0:	e00b      	b.n	80026ca <HAL_TIM_PWM_Start+0xaa>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_PWM_Start+0xa2>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c0:	e003      	b.n	80026ca <HAL_TIM_PWM_Start+0xaa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fd64 	bl	80031a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_TIM_PWM_Start+0x130>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_TIM_PWM_Start+0x130>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_TIM_PWM_Start+0xf0>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d004      	beq.n	8002710 <HAL_TIM_PWM_Start+0xf0>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_TIM_PWM_Start+0x134>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d010      	beq.n	8002744 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	e007      	b.n	8002744 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0202 	mvn.w	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa6f 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa62 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa71 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa45 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa38 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fa47 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0208 	mvn.w	r2, #8
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa1b 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa0e 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa1d 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f9f1 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9e4 	bl	8002c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9f3 	bl	8002c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd ff80 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fcd1 	bl	80032aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d10e      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9b7 	bl	8002ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b20      	cmp	r3, #32
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b20      	cmp	r3, #32
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0220 	mvn.w	r2, #32
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fc9c 	bl	8003298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800297e:	2302      	movs	r3, #2
 8002980:	e0ac      	b.n	8002adc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	f200 809f 	bhi.w	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029cd 	.word	0x080029cd
 800299c:	08002ad1 	.word	0x08002ad1
 80029a0:	08002ad1 	.word	0x08002ad1
 80029a4:	08002ad1 	.word	0x08002ad1
 80029a8:	08002a0d 	.word	0x08002a0d
 80029ac:	08002ad1 	.word	0x08002ad1
 80029b0:	08002ad1 	.word	0x08002ad1
 80029b4:	08002ad1 	.word	0x08002ad1
 80029b8:	08002a4f 	.word	0x08002a4f
 80029bc:	08002ad1 	.word	0x08002ad1
 80029c0:	08002ad1 	.word	0x08002ad1
 80029c4:	08002ad1 	.word	0x08002ad1
 80029c8:	08002a8f 	.word	0x08002a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9c6 	bl	8002d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	619a      	str	r2, [r3, #24]
      break;
 8002a0a:	e062      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa0c 	bl	8002e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6999      	ldr	r1, [r3, #24]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	021a      	lsls	r2, r3, #8
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
      break;
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa55 	bl	8002f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0208 	orr.w	r2, r2, #8
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0204 	bic.w	r2, r2, #4
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	61da      	str	r2, [r3, #28]
      break;
 8002a8c:	e021      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fa9f 	bl	8002fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	021a      	lsls	r2, r3, #8
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	61da      	str	r2, [r3, #28]
      break;
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_TIM_ConfigClockSource+0x18>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0b3      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x180>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d03e      	beq.n	8002bb4 <HAL_TIM_ConfigClockSource+0xd0>
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	f200 8087 	bhi.w	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	f000 8085 	beq.w	8002c50 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d87f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d01a      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0xa2>
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d87b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b60      	cmp	r3, #96	; 0x60
 8002b56:	d050      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x116>
 8002b58:	2b60      	cmp	r3, #96	; 0x60
 8002b5a:	d877      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b50      	cmp	r3, #80	; 0x50
 8002b5e:	d03c      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0xf6>
 8002b60:	2b50      	cmp	r3, #80	; 0x50
 8002b62:	d873      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d058      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x136>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d86f      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b30      	cmp	r3, #48	; 0x30
 8002b6e:	d064      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b70:	2b30      	cmp	r3, #48	; 0x30
 8002b72:	d86b      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d060      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d867      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05c      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d05a      	beq.n	8002c3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b84:	e062      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6899      	ldr	r1, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f000 fae4 	bl	8003162 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
      break;
 8002bb2:	e04e      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f000 facd 	bl	8003162 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd6:	609a      	str	r2, [r3, #8]
      break;
 8002bd8:	e03b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 fa44 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2150      	movs	r1, #80	; 0x50
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fa9b 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e02b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fa62 	bl	80030d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2160      	movs	r1, #96	; 0x60
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa8b 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002c18:	e01b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6859      	ldr	r1, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f000 fa24 	bl	8003074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2140      	movs	r1, #64	; 0x40
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fa7b 	bl	800312e <TIM_ITRx_SetConfig>
      break;
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f000 fa72 	bl	800312e <TIM_ITRx_SetConfig>
        break;
 8002c4a:	e002      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0xa8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <TIM_Base_SetConfig+0x28>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d003      	beq.n	8002cdc <TIM_Base_SetConfig+0x28>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a22      	ldr	r2, [pc, #136]	; (8002d60 <TIM_Base_SetConfig+0xac>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d108      	bne.n	8002cee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <TIM_Base_SetConfig+0xa8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0x52>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0x52>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <TIM_Base_SetConfig+0xac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d108      	bne.n	8002d18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <TIM_Base_SetConfig+0xa8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d103      	bne.n	8002d4c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	615a      	str	r2, [r3, #20]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400

08002d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 0302 	bic.w	r3, r3, #2
 8002dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <TIM_OC1_SetConfig+0xc8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10c      	bne.n	8002dda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0308 	bic.w	r3, r3, #8
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <TIM_OC1_SetConfig+0xc8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d111      	bne.n	8002e06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0210 	bic.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0320 	bic.w	r3, r3, #32
 8002e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <TIM_OC2_SetConfig+0xd0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10d      	bne.n	8002eac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <TIM_OC2_SetConfig+0xd0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d113      	bne.n	8002edc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	40012c00 	.word	0x40012c00

08002f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <TIM_OC3_SetConfig+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10d      	bne.n	8002f7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <TIM_OC3_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d113      	bne.n	8002fae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40012c00 	.word	0x40012c00

08002fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	031b      	lsls	r3, r3, #12
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <TIM_OC4_SetConfig+0x98>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d109      	bne.n	800304c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800303e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00

08003074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 030a 	bic.w	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 0210 	bic.w	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	031b      	lsls	r3, r3, #12
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800310c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	f043 0307 	orr.w	r3, r3, #7
 8003150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003162:	b480      	push	{r7}
 8003164:	b087      	sub	sp, #28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	431a      	orrs	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4313      	orrs	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	609a      	str	r2, [r3, #8]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	2201      	movs	r2, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e041      	b.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a14      	ldr	r2, [pc, #80]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d004      	beq.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10c      	bne.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	4313      	orrs	r3, r2
 8003268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400

08003298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e03f      	b.n	800334e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fd8a 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fc25 	bl	8003b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08a      	sub	sp, #40	; 0x28
 800335a:	af02      	add	r7, sp, #8
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b20      	cmp	r3, #32
 8003374:	d17c      	bne.n	8003470 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_UART_Transmit+0x2c>
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e075      	b.n	8003472 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_UART_Transmit+0x3e>
 8003390:	2302      	movs	r3, #2
 8003392:	e06e      	b.n	8003472 <HAL_UART_Transmit+0x11c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2221      	movs	r2, #33	; 0x21
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033aa:	f7fe f8b5 	bl	8001518 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d108      	bne.n	80033d8 <HAL_UART_Transmit+0x82>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033e8:	e02a      	b.n	8003440 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fa11 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e036      	b.n	8003472 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	3302      	adds	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e007      	b.n	8003432 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3301      	adds	r3, #1
 8003430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1cf      	bne.n	80033ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f9e1 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_UART_IRQHandler+0x52>
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa99 	bl	80039fe <UART_Receive_IT>
      return;
 80034cc:	e17b      	b.n	80037c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80b1 	beq.w	8003638 <HAL_UART_IRQHandler+0x1bc>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_UART_IRQHandler+0x70>
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_UART_IRQHandler+0x90>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_UART_IRQHandler+0xb0>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_UART_IRQHandler+0xd0>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00f      	beq.n	8003576 <HAL_UART_IRQHandler+0xfa>
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_UART_IRQHandler+0xee>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0208 	orr.w	r2, r3, #8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 811e 	beq.w	80037bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_UART_IRQHandler+0x11e>
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fa32 	bl	80039fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_UART_IRQHandler+0x146>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d031      	beq.n	8003626 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f974 	bl	80038b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d023      	beq.n	800361e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d013      	beq.n	8003616 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	4a76      	ldr	r2, [pc, #472]	; (80037cc <HAL_UART_IRQHandler+0x350>)
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f8b0 	bl	8001760 <HAL_DMA_Abort_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003610:	4610      	mov	r0, r2
 8003612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e00e      	b.n	8003634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f8ec 	bl	80037f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e00a      	b.n	8003634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f8e8 	bl	80037f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	e006      	b.n	8003634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8e4 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003632:	e0c3      	b.n	80037bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	bf00      	nop
    return;
 8003636:	e0c1      	b.n	80037bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	f040 80a1 	bne.w	8003784 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 809b 	beq.w	8003784 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8095 	beq.w	8003784 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d04e      	beq.n	800371c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003688:	8a3b      	ldrh	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8098 	beq.w	80037c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003694:	8a3a      	ldrh	r2, [r7, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	f080 8092 	bcs.w	80037c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8a3a      	ldrh	r2, [r7, #16]
 80036a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d02b      	beq.n	8003704 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0210 	bic.w	r2, r2, #16
 80036f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fff3 	bl	80016ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f876 	bl	8003806 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800371a:	e051      	b.n	80037c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003724:	b29b      	uxth	r3, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d047      	beq.n	80037c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003734:	8a7b      	ldrh	r3, [r7, #18]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003748:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0210 	bic.w	r2, r2, #16
 8003776:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003778:	8a7b      	ldrh	r3, [r7, #18]
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f842 	bl	8003806 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003782:	e01f      	b.n	80037c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_UART_IRQHandler+0x324>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f8c9 	bl	8003930 <UART_Transmit_IT>
    return;
 800379e:	e012      	b.n	80037c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_UART_IRQHandler+0x34a>
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f90a 	bl	80039ce <UART_EndTransmit_IT>
    return;
 80037ba:	e004      	b.n	80037c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80037bc:	bf00      	nop
 80037be:	e002      	b.n	80037c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037c0:	bf00      	nop
 80037c2:	e000      	b.n	80037c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80037c4:	bf00      	nop
  }
}
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	08003909 	.word	0x08003909

080037d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	e02c      	b.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d028      	beq.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
 800383c:	f7fd fe6c 	bl	8001518 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	429a      	cmp	r2, r3
 800384a:	d21d      	bcs.n	8003888 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800385a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e00f      	b.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	429a      	cmp	r2, r3
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d0c3      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0210 	bic.w	r2, r2, #16
 80038ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff ff66 	bl	80037f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b21      	cmp	r3, #33	; 0x21
 8003942:	d13e      	bne.n	80039c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d114      	bne.n	8003978 <UART_Transmit_IT+0x48>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d110      	bne.n	8003978 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800396a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]
 8003976:	e008      	b.n	800398a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	1c59      	adds	r1, r3, #1
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6211      	str	r1, [r2, #32]
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	84d1      	strh	r1, [r2, #38]	; 0x26
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff feee 	bl	80037d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b22      	cmp	r3, #34	; 0x22
 8003a10:	f040 8099 	bne.w	8003b46 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d117      	bne.n	8003a4e <UART_Receive_IT+0x50>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d113      	bne.n	8003a4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4c:	e026      	b.n	8003a9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d007      	beq.n	8003a72 <UART_Receive_IT+0x74>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <UART_Receive_IT+0x82>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e008      	b.n	8003a92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d148      	bne.n	8003b42 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0220 	bic.w	r2, r2, #32
 8003abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d123      	bne.n	8003b38 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0210 	bic.w	r2, r2, #16
 8003b04:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d10a      	bne.n	8003b2a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fe68 	bl	8003806 <HAL_UARTEx_RxEventCallback>
 8003b36:	e002      	b.n	8003b3e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fe52 	bl	80037e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e002      	b.n	8003b48 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b8a:	f023 030c 	bic.w	r3, r3, #12
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <UART_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe fbdc 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	e002      	b.n	8003bc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fbc4 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8003bc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bdc:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <UART_SetConfig+0x118>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	0119      	lsls	r1, r3, #4
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009a      	lsls	r2, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <UART_SetConfig+0x118>)
 8003bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2064      	movs	r0, #100	; 0x64
 8003c06:	fb00 f303 	mul.w	r3, r0, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	; 0x32
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <UART_SetConfig+0x118>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1c:	4419      	add	r1, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <UART_SetConfig+0x118>)
 8003c36:	fba3 0302 	umull	r0, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2064      	movs	r0, #100	; 0x64
 8003c3e:	fb00 f303 	mul.w	r3, r0, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a07      	ldr	r2, [pc, #28]	; (8003c68 <UART_SetConfig+0x118>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	440a      	add	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013800 	.word	0x40013800
 8003c68:	51eb851f 	.word	0x51eb851f

08003c6c <__errno>:
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <__errno+0x8>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000002c 	.word	0x2000002c

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	4d0c      	ldr	r5, [pc, #48]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7e:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	f000 fc9c 	bl	80045c4 <_init>
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4d0a      	ldr	r5, [pc, #40]	; (8003cb8 <__libc_init_array+0x40>)
 8003c90:	4c0a      	ldr	r4, [pc, #40]	; (8003cbc <__libc_init_array+0x44>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	080046e0 	.word	0x080046e0
 8003cb4:	080046e0 	.word	0x080046e0
 8003cb8:	080046e0 	.word	0x080046e0
 8003cbc:	080046e4 	.word	0x080046e4

08003cc0 <memset>:
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4402      	add	r2, r0
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	f803 1b01 	strb.w	r1, [r3], #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <siprintf>:
 8003cd0:	b40e      	push	{r1, r2, r3}
 8003cd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cd6:	b500      	push	{lr}
 8003cd8:	b09c      	sub	sp, #112	; 0x70
 8003cda:	ab1d      	add	r3, sp, #116	; 0x74
 8003cdc:	9002      	str	r0, [sp, #8]
 8003cde:	9006      	str	r0, [sp, #24]
 8003ce0:	9107      	str	r1, [sp, #28]
 8003ce2:	9104      	str	r1, [sp, #16]
 8003ce4:	4808      	ldr	r0, [pc, #32]	; (8003d08 <siprintf+0x38>)
 8003ce6:	4909      	ldr	r1, [pc, #36]	; (8003d0c <siprintf+0x3c>)
 8003ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cec:	9105      	str	r1, [sp, #20]
 8003cee:	6800      	ldr	r0, [r0, #0]
 8003cf0:	a902      	add	r1, sp, #8
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	f000 f868 	bl	8003dc8 <_svfiprintf_r>
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	9b02      	ldr	r3, [sp, #8]
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	b01c      	add	sp, #112	; 0x70
 8003d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d04:	b003      	add	sp, #12
 8003d06:	4770      	bx	lr
 8003d08:	2000002c 	.word	0x2000002c
 8003d0c:	ffff0208 	.word	0xffff0208

08003d10 <__ssputs_r>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	688e      	ldr	r6, [r1, #8]
 8003d16:	4682      	mov	sl, r0
 8003d18:	429e      	cmp	r6, r3
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	4690      	mov	r8, r2
 8003d1e:	461f      	mov	r7, r3
 8003d20:	d838      	bhi.n	8003d94 <__ssputs_r+0x84>
 8003d22:	898a      	ldrh	r2, [r1, #12]
 8003d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d28:	d032      	beq.n	8003d90 <__ssputs_r+0x80>
 8003d2a:	6825      	ldr	r5, [r4, #0]
 8003d2c:	6909      	ldr	r1, [r1, #16]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	eba5 0901 	sub.w	r9, r5, r1
 8003d34:	6965      	ldr	r5, [r4, #20]
 8003d36:	444b      	add	r3, r9
 8003d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d40:	106d      	asrs	r5, r5, #1
 8003d42:	429d      	cmp	r5, r3
 8003d44:	bf38      	it	cc
 8003d46:	461d      	movcc	r5, r3
 8003d48:	0553      	lsls	r3, r2, #21
 8003d4a:	d531      	bpl.n	8003db0 <__ssputs_r+0xa0>
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	f000 fb6f 	bl	8004430 <_malloc_r>
 8003d52:	4606      	mov	r6, r0
 8003d54:	b950      	cbnz	r0, 8003d6c <__ssputs_r+0x5c>
 8003d56:	230c      	movs	r3, #12
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f8ca 3000 	str.w	r3, [sl]
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6c:	464a      	mov	r2, r9
 8003d6e:	6921      	ldr	r1, [r4, #16]
 8003d70:	f000 face 	bl	8004310 <memcpy>
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	81a3      	strh	r3, [r4, #12]
 8003d80:	6126      	str	r6, [r4, #16]
 8003d82:	444e      	add	r6, r9
 8003d84:	6026      	str	r6, [r4, #0]
 8003d86:	463e      	mov	r6, r7
 8003d88:	6165      	str	r5, [r4, #20]
 8003d8a:	eba5 0509 	sub.w	r5, r5, r9
 8003d8e:	60a5      	str	r5, [r4, #8]
 8003d90:	42be      	cmp	r6, r7
 8003d92:	d900      	bls.n	8003d96 <__ssputs_r+0x86>
 8003d94:	463e      	mov	r6, r7
 8003d96:	4632      	mov	r2, r6
 8003d98:	4641      	mov	r1, r8
 8003d9a:	6820      	ldr	r0, [r4, #0]
 8003d9c:	f000 fac6 	bl	800432c <memmove>
 8003da0:	68a3      	ldr	r3, [r4, #8]
 8003da2:	2000      	movs	r0, #0
 8003da4:	1b9b      	subs	r3, r3, r6
 8003da6:	60a3      	str	r3, [r4, #8]
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	4433      	add	r3, r6
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	e7db      	b.n	8003d68 <__ssputs_r+0x58>
 8003db0:	462a      	mov	r2, r5
 8003db2:	f000 fbb1 	bl	8004518 <_realloc_r>
 8003db6:	4606      	mov	r6, r0
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d1e1      	bne.n	8003d80 <__ssputs_r+0x70>
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	6921      	ldr	r1, [r4, #16]
 8003dc0:	f000 face 	bl	8004360 <_free_r>
 8003dc4:	e7c7      	b.n	8003d56 <__ssputs_r+0x46>
	...

08003dc8 <_svfiprintf_r>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	4698      	mov	r8, r3
 8003dce:	898b      	ldrh	r3, [r1, #12]
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	460d      	mov	r5, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	b09d      	sub	sp, #116	; 0x74
 8003dda:	d50e      	bpl.n	8003dfa <_svfiprintf_r+0x32>
 8003ddc:	690b      	ldr	r3, [r1, #16]
 8003dde:	b963      	cbnz	r3, 8003dfa <_svfiprintf_r+0x32>
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	f000 fb25 	bl	8004430 <_malloc_r>
 8003de6:	6028      	str	r0, [r5, #0]
 8003de8:	6128      	str	r0, [r5, #16]
 8003dea:	b920      	cbnz	r0, 8003df6 <_svfiprintf_r+0x2e>
 8003dec:	230c      	movs	r3, #12
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	e0d1      	b.n	8003f9a <_svfiprintf_r+0x1d2>
 8003df6:	2340      	movs	r3, #64	; 0x40
 8003df8:	616b      	str	r3, [r5, #20]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfe:	2320      	movs	r3, #32
 8003e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e04:	2330      	movs	r3, #48	; 0x30
 8003e06:	f04f 0901 	mov.w	r9, #1
 8003e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fb4 <_svfiprintf_r+0x1ec>
 8003e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e16:	4623      	mov	r3, r4
 8003e18:	469a      	mov	sl, r3
 8003e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e1e:	b10a      	cbz	r2, 8003e24 <_svfiprintf_r+0x5c>
 8003e20:	2a25      	cmp	r2, #37	; 0x25
 8003e22:	d1f9      	bne.n	8003e18 <_svfiprintf_r+0x50>
 8003e24:	ebba 0b04 	subs.w	fp, sl, r4
 8003e28:	d00b      	beq.n	8003e42 <_svfiprintf_r+0x7a>
 8003e2a:	465b      	mov	r3, fp
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	4638      	mov	r0, r7
 8003e32:	f7ff ff6d 	bl	8003d10 <__ssputs_r>
 8003e36:	3001      	adds	r0, #1
 8003e38:	f000 80aa 	beq.w	8003f90 <_svfiprintf_r+0x1c8>
 8003e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e3e:	445a      	add	r2, fp
 8003e40:	9209      	str	r2, [sp, #36]	; 0x24
 8003e42:	f89a 3000 	ldrb.w	r3, [sl]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80a2 	beq.w	8003f90 <_svfiprintf_r+0x1c8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e56:	f10a 0a01 	add.w	sl, sl, #1
 8003e5a:	9304      	str	r3, [sp, #16]
 8003e5c:	9307      	str	r3, [sp, #28]
 8003e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e62:	931a      	str	r3, [sp, #104]	; 0x68
 8003e64:	4654      	mov	r4, sl
 8003e66:	2205      	movs	r2, #5
 8003e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e6c:	4851      	ldr	r0, [pc, #324]	; (8003fb4 <_svfiprintf_r+0x1ec>)
 8003e6e:	f000 fa41 	bl	80042f4 <memchr>
 8003e72:	9a04      	ldr	r2, [sp, #16]
 8003e74:	b9d8      	cbnz	r0, 8003eae <_svfiprintf_r+0xe6>
 8003e76:	06d0      	lsls	r0, r2, #27
 8003e78:	bf44      	itt	mi
 8003e7a:	2320      	movmi	r3, #32
 8003e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e80:	0711      	lsls	r1, r2, #28
 8003e82:	bf44      	itt	mi
 8003e84:	232b      	movmi	r3, #43	; 0x2b
 8003e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e90:	d015      	beq.n	8003ebe <_svfiprintf_r+0xf6>
 8003e92:	4654      	mov	r4, sl
 8003e94:	2000      	movs	r0, #0
 8003e96:	f04f 0c0a 	mov.w	ip, #10
 8003e9a:	9a07      	ldr	r2, [sp, #28]
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ea2:	3b30      	subs	r3, #48	; 0x30
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d94e      	bls.n	8003f46 <_svfiprintf_r+0x17e>
 8003ea8:	b1b0      	cbz	r0, 8003ed8 <_svfiprintf_r+0x110>
 8003eaa:	9207      	str	r2, [sp, #28]
 8003eac:	e014      	b.n	8003ed8 <_svfiprintf_r+0x110>
 8003eae:	eba0 0308 	sub.w	r3, r0, r8
 8003eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	46a2      	mov	sl, r4
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	e7d2      	b.n	8003e64 <_svfiprintf_r+0x9c>
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	1d19      	adds	r1, r3, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	9103      	str	r1, [sp, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfbb      	ittet	lt
 8003eca:	425b      	neglt	r3, r3
 8003ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8003ed0:	9307      	strge	r3, [sp, #28]
 8003ed2:	9307      	strlt	r3, [sp, #28]
 8003ed4:	bfb8      	it	lt
 8003ed6:	9204      	strlt	r2, [sp, #16]
 8003ed8:	7823      	ldrb	r3, [r4, #0]
 8003eda:	2b2e      	cmp	r3, #46	; 0x2e
 8003edc:	d10c      	bne.n	8003ef8 <_svfiprintf_r+0x130>
 8003ede:	7863      	ldrb	r3, [r4, #1]
 8003ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee2:	d135      	bne.n	8003f50 <_svfiprintf_r+0x188>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	3402      	adds	r4, #2
 8003ee8:	1d1a      	adds	r2, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ef6:	9305      	str	r3, [sp, #20]
 8003ef8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003fb8 <_svfiprintf_r+0x1f0>
 8003efc:	2203      	movs	r2, #3
 8003efe:	4650      	mov	r0, sl
 8003f00:	7821      	ldrb	r1, [r4, #0]
 8003f02:	f000 f9f7 	bl	80042f4 <memchr>
 8003f06:	b140      	cbz	r0, 8003f1a <_svfiprintf_r+0x152>
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	eba0 000a 	sub.w	r0, r0, sl
 8003f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f12:	9b04      	ldr	r3, [sp, #16]
 8003f14:	3401      	adds	r4, #1
 8003f16:	4303      	orrs	r3, r0
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1e:	2206      	movs	r2, #6
 8003f20:	4826      	ldr	r0, [pc, #152]	; (8003fbc <_svfiprintf_r+0x1f4>)
 8003f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f26:	f000 f9e5 	bl	80042f4 <memchr>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d038      	beq.n	8003fa0 <_svfiprintf_r+0x1d8>
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <_svfiprintf_r+0x1f8>)
 8003f30:	bb1b      	cbnz	r3, 8003f7a <_svfiprintf_r+0x1b2>
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	3307      	adds	r3, #7
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	9303      	str	r3, [sp, #12]
 8003f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f40:	4433      	add	r3, r6
 8003f42:	9309      	str	r3, [sp, #36]	; 0x24
 8003f44:	e767      	b.n	8003e16 <_svfiprintf_r+0x4e>
 8003f46:	460c      	mov	r4, r1
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f4e:	e7a5      	b.n	8003e9c <_svfiprintf_r+0xd4>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f04f 0c0a 	mov.w	ip, #10
 8003f56:	4619      	mov	r1, r3
 8003f58:	3401      	adds	r4, #1
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f62:	3a30      	subs	r2, #48	; 0x30
 8003f64:	2a09      	cmp	r2, #9
 8003f66:	d903      	bls.n	8003f70 <_svfiprintf_r+0x1a8>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0c5      	beq.n	8003ef8 <_svfiprintf_r+0x130>
 8003f6c:	9105      	str	r1, [sp, #20]
 8003f6e:	e7c3      	b.n	8003ef8 <_svfiprintf_r+0x130>
 8003f70:	4604      	mov	r4, r0
 8003f72:	2301      	movs	r3, #1
 8003f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f78:	e7f0      	b.n	8003f5c <_svfiprintf_r+0x194>
 8003f7a:	ab03      	add	r3, sp, #12
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	462a      	mov	r2, r5
 8003f80:	4638      	mov	r0, r7
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <_svfiprintf_r+0x1fc>)
 8003f84:	a904      	add	r1, sp, #16
 8003f86:	f3af 8000 	nop.w
 8003f8a:	1c42      	adds	r2, r0, #1
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	d1d6      	bne.n	8003f3e <_svfiprintf_r+0x176>
 8003f90:	89ab      	ldrh	r3, [r5, #12]
 8003f92:	065b      	lsls	r3, r3, #25
 8003f94:	f53f af2c 	bmi.w	8003df0 <_svfiprintf_r+0x28>
 8003f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f9a:	b01d      	add	sp, #116	; 0x74
 8003f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	462a      	mov	r2, r5
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <_svfiprintf_r+0x1fc>)
 8003faa:	a904      	add	r1, sp, #16
 8003fac:	f000 f87c 	bl	80040a8 <_printf_i>
 8003fb0:	e7eb      	b.n	8003f8a <_svfiprintf_r+0x1c2>
 8003fb2:	bf00      	nop
 8003fb4:	080046ac 	.word	0x080046ac
 8003fb8:	080046b2 	.word	0x080046b2
 8003fbc:	080046b6 	.word	0x080046b6
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	08003d11 	.word	0x08003d11

08003fc8 <_printf_common>:
 8003fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	4616      	mov	r6, r2
 8003fce:	4699      	mov	r9, r3
 8003fd0:	688a      	ldr	r2, [r1, #8]
 8003fd2:	690b      	ldr	r3, [r1, #16]
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	bfb8      	it	lt
 8003fda:	4613      	movlt	r3, r2
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe8:	b10a      	cbz	r2, 8003fee <_printf_common+0x26>
 8003fea:	3301      	adds	r3, #1
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	0699      	lsls	r1, r3, #26
 8003ff2:	bf42      	ittt	mi
 8003ff4:	6833      	ldrmi	r3, [r6, #0]
 8003ff6:	3302      	addmi	r3, #2
 8003ff8:	6033      	strmi	r3, [r6, #0]
 8003ffa:	6825      	ldr	r5, [r4, #0]
 8003ffc:	f015 0506 	ands.w	r5, r5, #6
 8004000:	d106      	bne.n	8004010 <_printf_common+0x48>
 8004002:	f104 0a19 	add.w	sl, r4, #25
 8004006:	68e3      	ldr	r3, [r4, #12]
 8004008:	6832      	ldr	r2, [r6, #0]
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	42ab      	cmp	r3, r5
 800400e:	dc28      	bgt.n	8004062 <_printf_common+0x9a>
 8004010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004014:	1e13      	subs	r3, r2, #0
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	bf18      	it	ne
 800401a:	2301      	movne	r3, #1
 800401c:	0692      	lsls	r2, r2, #26
 800401e:	d42d      	bmi.n	800407c <_printf_common+0xb4>
 8004020:	4649      	mov	r1, r9
 8004022:	4638      	mov	r0, r7
 8004024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004028:	47c0      	blx	r8
 800402a:	3001      	adds	r0, #1
 800402c:	d020      	beq.n	8004070 <_printf_common+0xa8>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	68e5      	ldr	r5, [r4, #12]
 8004032:	f003 0306 	and.w	r3, r3, #6
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf18      	it	ne
 800403a:	2500      	movne	r5, #0
 800403c:	6832      	ldr	r2, [r6, #0]
 800403e:	f04f 0600 	mov.w	r6, #0
 8004042:	68a3      	ldr	r3, [r4, #8]
 8004044:	bf08      	it	eq
 8004046:	1aad      	subeq	r5, r5, r2
 8004048:	6922      	ldr	r2, [r4, #16]
 800404a:	bf08      	it	eq
 800404c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004050:	4293      	cmp	r3, r2
 8004052:	bfc4      	itt	gt
 8004054:	1a9b      	subgt	r3, r3, r2
 8004056:	18ed      	addgt	r5, r5, r3
 8004058:	341a      	adds	r4, #26
 800405a:	42b5      	cmp	r5, r6
 800405c:	d11a      	bne.n	8004094 <_printf_common+0xcc>
 800405e:	2000      	movs	r0, #0
 8004060:	e008      	b.n	8004074 <_printf_common+0xac>
 8004062:	2301      	movs	r3, #1
 8004064:	4652      	mov	r2, sl
 8004066:	4649      	mov	r1, r9
 8004068:	4638      	mov	r0, r7
 800406a:	47c0      	blx	r8
 800406c:	3001      	adds	r0, #1
 800406e:	d103      	bne.n	8004078 <_printf_common+0xb0>
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004078:	3501      	adds	r5, #1
 800407a:	e7c4      	b.n	8004006 <_printf_common+0x3e>
 800407c:	2030      	movs	r0, #48	; 0x30
 800407e:	18e1      	adds	r1, r4, r3
 8004080:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800408a:	4422      	add	r2, r4
 800408c:	3302      	adds	r3, #2
 800408e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004092:	e7c5      	b.n	8004020 <_printf_common+0x58>
 8004094:	2301      	movs	r3, #1
 8004096:	4622      	mov	r2, r4
 8004098:	4649      	mov	r1, r9
 800409a:	4638      	mov	r0, r7
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d0e6      	beq.n	8004070 <_printf_common+0xa8>
 80040a2:	3601      	adds	r6, #1
 80040a4:	e7d9      	b.n	800405a <_printf_common+0x92>
	...

080040a8 <_printf_i>:
 80040a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	7e0f      	ldrb	r7, [r1, #24]
 80040ae:	4691      	mov	r9, r2
 80040b0:	2f78      	cmp	r7, #120	; 0x78
 80040b2:	4680      	mov	r8, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	469a      	mov	sl, r3
 80040b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040be:	d807      	bhi.n	80040d0 <_printf_i+0x28>
 80040c0:	2f62      	cmp	r7, #98	; 0x62
 80040c2:	d80a      	bhi.n	80040da <_printf_i+0x32>
 80040c4:	2f00      	cmp	r7, #0
 80040c6:	f000 80d9 	beq.w	800427c <_printf_i+0x1d4>
 80040ca:	2f58      	cmp	r7, #88	; 0x58
 80040cc:	f000 80a4 	beq.w	8004218 <_printf_i+0x170>
 80040d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040d8:	e03a      	b.n	8004150 <_printf_i+0xa8>
 80040da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040de:	2b15      	cmp	r3, #21
 80040e0:	d8f6      	bhi.n	80040d0 <_printf_i+0x28>
 80040e2:	a101      	add	r1, pc, #4	; (adr r1, 80040e8 <_printf_i+0x40>)
 80040e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040e8:	08004141 	.word	0x08004141
 80040ec:	08004155 	.word	0x08004155
 80040f0:	080040d1 	.word	0x080040d1
 80040f4:	080040d1 	.word	0x080040d1
 80040f8:	080040d1 	.word	0x080040d1
 80040fc:	080040d1 	.word	0x080040d1
 8004100:	08004155 	.word	0x08004155
 8004104:	080040d1 	.word	0x080040d1
 8004108:	080040d1 	.word	0x080040d1
 800410c:	080040d1 	.word	0x080040d1
 8004110:	080040d1 	.word	0x080040d1
 8004114:	08004263 	.word	0x08004263
 8004118:	08004185 	.word	0x08004185
 800411c:	08004245 	.word	0x08004245
 8004120:	080040d1 	.word	0x080040d1
 8004124:	080040d1 	.word	0x080040d1
 8004128:	08004285 	.word	0x08004285
 800412c:	080040d1 	.word	0x080040d1
 8004130:	08004185 	.word	0x08004185
 8004134:	080040d1 	.word	0x080040d1
 8004138:	080040d1 	.word	0x080040d1
 800413c:	0800424d 	.word	0x0800424d
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	602a      	str	r2, [r5, #0]
 8004148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800414c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004150:	2301      	movs	r3, #1
 8004152:	e0a4      	b.n	800429e <_printf_i+0x1f6>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	6829      	ldr	r1, [r5, #0]
 8004158:	0606      	lsls	r6, r0, #24
 800415a:	f101 0304 	add.w	r3, r1, #4
 800415e:	d50a      	bpl.n	8004176 <_printf_i+0xce>
 8004160:	680e      	ldr	r6, [r1, #0]
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	2e00      	cmp	r6, #0
 8004166:	da03      	bge.n	8004170 <_printf_i+0xc8>
 8004168:	232d      	movs	r3, #45	; 0x2d
 800416a:	4276      	negs	r6, r6
 800416c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004170:	230a      	movs	r3, #10
 8004172:	485e      	ldr	r0, [pc, #376]	; (80042ec <_printf_i+0x244>)
 8004174:	e019      	b.n	80041aa <_printf_i+0x102>
 8004176:	680e      	ldr	r6, [r1, #0]
 8004178:	f010 0f40 	tst.w	r0, #64	; 0x40
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	bf18      	it	ne
 8004180:	b236      	sxthne	r6, r6
 8004182:	e7ef      	b.n	8004164 <_printf_i+0xbc>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	6820      	ldr	r0, [r4, #0]
 8004188:	1d19      	adds	r1, r3, #4
 800418a:	6029      	str	r1, [r5, #0]
 800418c:	0601      	lsls	r1, r0, #24
 800418e:	d501      	bpl.n	8004194 <_printf_i+0xec>
 8004190:	681e      	ldr	r6, [r3, #0]
 8004192:	e002      	b.n	800419a <_printf_i+0xf2>
 8004194:	0646      	lsls	r6, r0, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0xe8>
 8004198:	881e      	ldrh	r6, [r3, #0]
 800419a:	2f6f      	cmp	r7, #111	; 0x6f
 800419c:	bf0c      	ite	eq
 800419e:	2308      	moveq	r3, #8
 80041a0:	230a      	movne	r3, #10
 80041a2:	4852      	ldr	r0, [pc, #328]	; (80042ec <_printf_i+0x244>)
 80041a4:	2100      	movs	r1, #0
 80041a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041aa:	6865      	ldr	r5, [r4, #4]
 80041ac:	2d00      	cmp	r5, #0
 80041ae:	bfa8      	it	ge
 80041b0:	6821      	ldrge	r1, [r4, #0]
 80041b2:	60a5      	str	r5, [r4, #8]
 80041b4:	bfa4      	itt	ge
 80041b6:	f021 0104 	bicge.w	r1, r1, #4
 80041ba:	6021      	strge	r1, [r4, #0]
 80041bc:	b90e      	cbnz	r6, 80041c2 <_printf_i+0x11a>
 80041be:	2d00      	cmp	r5, #0
 80041c0:	d04d      	beq.n	800425e <_printf_i+0x1b6>
 80041c2:	4615      	mov	r5, r2
 80041c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80041c8:	fb03 6711 	mls	r7, r3, r1, r6
 80041cc:	5dc7      	ldrb	r7, [r0, r7]
 80041ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041d2:	4637      	mov	r7, r6
 80041d4:	42bb      	cmp	r3, r7
 80041d6:	460e      	mov	r6, r1
 80041d8:	d9f4      	bls.n	80041c4 <_printf_i+0x11c>
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d10b      	bne.n	80041f6 <_printf_i+0x14e>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	07de      	lsls	r6, r3, #31
 80041e2:	d508      	bpl.n	80041f6 <_printf_i+0x14e>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6861      	ldr	r1, [r4, #4]
 80041e8:	4299      	cmp	r1, r3
 80041ea:	bfde      	ittt	le
 80041ec:	2330      	movle	r3, #48	; 0x30
 80041ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f6:	1b52      	subs	r2, r2, r5
 80041f8:	6122      	str	r2, [r4, #16]
 80041fa:	464b      	mov	r3, r9
 80041fc:	4621      	mov	r1, r4
 80041fe:	4640      	mov	r0, r8
 8004200:	f8cd a000 	str.w	sl, [sp]
 8004204:	aa03      	add	r2, sp, #12
 8004206:	f7ff fedf 	bl	8003fc8 <_printf_common>
 800420a:	3001      	adds	r0, #1
 800420c:	d14c      	bne.n	80042a8 <_printf_i+0x200>
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	b004      	add	sp, #16
 8004214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004218:	4834      	ldr	r0, [pc, #208]	; (80042ec <_printf_i+0x244>)
 800421a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800421e:	6829      	ldr	r1, [r5, #0]
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	f851 6b04 	ldr.w	r6, [r1], #4
 8004226:	6029      	str	r1, [r5, #0]
 8004228:	061d      	lsls	r5, r3, #24
 800422a:	d514      	bpl.n	8004256 <_printf_i+0x1ae>
 800422c:	07df      	lsls	r7, r3, #31
 800422e:	bf44      	itt	mi
 8004230:	f043 0320 	orrmi.w	r3, r3, #32
 8004234:	6023      	strmi	r3, [r4, #0]
 8004236:	b91e      	cbnz	r6, 8004240 <_printf_i+0x198>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	f023 0320 	bic.w	r3, r3, #32
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	2310      	movs	r3, #16
 8004242:	e7af      	b.n	80041a4 <_printf_i+0xfc>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	2378      	movs	r3, #120	; 0x78
 800424e:	4828      	ldr	r0, [pc, #160]	; (80042f0 <_printf_i+0x248>)
 8004250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004254:	e7e3      	b.n	800421e <_printf_i+0x176>
 8004256:	0659      	lsls	r1, r3, #25
 8004258:	bf48      	it	mi
 800425a:	b2b6      	uxthmi	r6, r6
 800425c:	e7e6      	b.n	800422c <_printf_i+0x184>
 800425e:	4615      	mov	r5, r2
 8004260:	e7bb      	b.n	80041da <_printf_i+0x132>
 8004262:	682b      	ldr	r3, [r5, #0]
 8004264:	6826      	ldr	r6, [r4, #0]
 8004266:	1d18      	adds	r0, r3, #4
 8004268:	6961      	ldr	r1, [r4, #20]
 800426a:	6028      	str	r0, [r5, #0]
 800426c:	0635      	lsls	r5, r6, #24
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	d501      	bpl.n	8004276 <_printf_i+0x1ce>
 8004272:	6019      	str	r1, [r3, #0]
 8004274:	e002      	b.n	800427c <_printf_i+0x1d4>
 8004276:	0670      	lsls	r0, r6, #25
 8004278:	d5fb      	bpl.n	8004272 <_printf_i+0x1ca>
 800427a:	8019      	strh	r1, [r3, #0]
 800427c:	2300      	movs	r3, #0
 800427e:	4615      	mov	r5, r2
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	e7ba      	b.n	80041fa <_printf_i+0x152>
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	2100      	movs	r1, #0
 8004288:	1d1a      	adds	r2, r3, #4
 800428a:	602a      	str	r2, [r5, #0]
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	6862      	ldr	r2, [r4, #4]
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f82f 	bl	80042f4 <memchr>
 8004296:	b108      	cbz	r0, 800429c <_printf_i+0x1f4>
 8004298:	1b40      	subs	r0, r0, r5
 800429a:	6060      	str	r0, [r4, #4]
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	6123      	str	r3, [r4, #16]
 80042a0:	2300      	movs	r3, #0
 80042a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a6:	e7a8      	b.n	80041fa <_printf_i+0x152>
 80042a8:	462a      	mov	r2, r5
 80042aa:	4649      	mov	r1, r9
 80042ac:	4640      	mov	r0, r8
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	47d0      	blx	sl
 80042b2:	3001      	adds	r0, #1
 80042b4:	d0ab      	beq.n	800420e <_printf_i+0x166>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	079b      	lsls	r3, r3, #30
 80042ba:	d413      	bmi.n	80042e4 <_printf_i+0x23c>
 80042bc:	68e0      	ldr	r0, [r4, #12]
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	4298      	cmp	r0, r3
 80042c2:	bfb8      	it	lt
 80042c4:	4618      	movlt	r0, r3
 80042c6:	e7a4      	b.n	8004212 <_printf_i+0x16a>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4632      	mov	r2, r6
 80042cc:	4649      	mov	r1, r9
 80042ce:	4640      	mov	r0, r8
 80042d0:	47d0      	blx	sl
 80042d2:	3001      	adds	r0, #1
 80042d4:	d09b      	beq.n	800420e <_printf_i+0x166>
 80042d6:	3501      	adds	r5, #1
 80042d8:	68e3      	ldr	r3, [r4, #12]
 80042da:	9903      	ldr	r1, [sp, #12]
 80042dc:	1a5b      	subs	r3, r3, r1
 80042de:	42ab      	cmp	r3, r5
 80042e0:	dcf2      	bgt.n	80042c8 <_printf_i+0x220>
 80042e2:	e7eb      	b.n	80042bc <_printf_i+0x214>
 80042e4:	2500      	movs	r5, #0
 80042e6:	f104 0619 	add.w	r6, r4, #25
 80042ea:	e7f5      	b.n	80042d8 <_printf_i+0x230>
 80042ec:	080046bd 	.word	0x080046bd
 80042f0:	080046ce 	.word	0x080046ce

080042f4 <memchr>:
 80042f4:	4603      	mov	r3, r0
 80042f6:	b510      	push	{r4, lr}
 80042f8:	b2c9      	uxtb	r1, r1
 80042fa:	4402      	add	r2, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	d101      	bne.n	8004306 <memchr+0x12>
 8004302:	2000      	movs	r0, #0
 8004304:	e003      	b.n	800430e <memchr+0x1a>
 8004306:	7804      	ldrb	r4, [r0, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	428c      	cmp	r4, r1
 800430c:	d1f6      	bne.n	80042fc <memchr+0x8>
 800430e:	bd10      	pop	{r4, pc}

08004310 <memcpy>:
 8004310:	440a      	add	r2, r1
 8004312:	4291      	cmp	r1, r2
 8004314:	f100 33ff 	add.w	r3, r0, #4294967295
 8004318:	d100      	bne.n	800431c <memcpy+0xc>
 800431a:	4770      	bx	lr
 800431c:	b510      	push	{r4, lr}
 800431e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004322:	4291      	cmp	r1, r2
 8004324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004328:	d1f9      	bne.n	800431e <memcpy+0xe>
 800432a:	bd10      	pop	{r4, pc}

0800432c <memmove>:
 800432c:	4288      	cmp	r0, r1
 800432e:	b510      	push	{r4, lr}
 8004330:	eb01 0402 	add.w	r4, r1, r2
 8004334:	d902      	bls.n	800433c <memmove+0x10>
 8004336:	4284      	cmp	r4, r0
 8004338:	4623      	mov	r3, r4
 800433a:	d807      	bhi.n	800434c <memmove+0x20>
 800433c:	1e43      	subs	r3, r0, #1
 800433e:	42a1      	cmp	r1, r4
 8004340:	d008      	beq.n	8004354 <memmove+0x28>
 8004342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800434a:	e7f8      	b.n	800433e <memmove+0x12>
 800434c:	4601      	mov	r1, r0
 800434e:	4402      	add	r2, r0
 8004350:	428a      	cmp	r2, r1
 8004352:	d100      	bne.n	8004356 <memmove+0x2a>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800435e:	e7f7      	b.n	8004350 <memmove+0x24>

08004360 <_free_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	d040      	beq.n	80043ea <_free_r+0x8a>
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f0c      	subs	r4, r1, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	18e4      	addlt	r4, r4, r3
 8004374:	f000 f910 	bl	8004598 <__malloc_lock>
 8004378:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <_free_r+0x8c>)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	b933      	cbnz	r3, 800438c <_free_r+0x2c>
 800437e:	6063      	str	r3, [r4, #4]
 8004380:	6014      	str	r4, [r2, #0]
 8004382:	4628      	mov	r0, r5
 8004384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004388:	f000 b90c 	b.w	80045a4 <__malloc_unlock>
 800438c:	42a3      	cmp	r3, r4
 800438e:	d908      	bls.n	80043a2 <_free_r+0x42>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	1821      	adds	r1, r4, r0
 8004394:	428b      	cmp	r3, r1
 8004396:	bf01      	itttt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	1809      	addeq	r1, r1, r0
 800439e:	6021      	streq	r1, [r4, #0]
 80043a0:	e7ed      	b.n	800437e <_free_r+0x1e>
 80043a2:	461a      	mov	r2, r3
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b10b      	cbz	r3, 80043ac <_free_r+0x4c>
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d9fa      	bls.n	80043a2 <_free_r+0x42>
 80043ac:	6811      	ldr	r1, [r2, #0]
 80043ae:	1850      	adds	r0, r2, r1
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d10b      	bne.n	80043cc <_free_r+0x6c>
 80043b4:	6820      	ldr	r0, [r4, #0]
 80043b6:	4401      	add	r1, r0
 80043b8:	1850      	adds	r0, r2, r1
 80043ba:	4283      	cmp	r3, r0
 80043bc:	6011      	str	r1, [r2, #0]
 80043be:	d1e0      	bne.n	8004382 <_free_r+0x22>
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4401      	add	r1, r0
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	e7da      	b.n	8004382 <_free_r+0x22>
 80043cc:	d902      	bls.n	80043d4 <_free_r+0x74>
 80043ce:	230c      	movs	r3, #12
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	e7d6      	b.n	8004382 <_free_r+0x22>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf01      	itttt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6054      	str	r4, [r2, #4]
 80043e8:	e7cb      	b.n	8004382 <_free_r+0x22>
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	200004dc 	.word	0x200004dc

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0e      	ldr	r6, [pc, #56]	; (800442c <sbrk_aligned+0x3c>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 f8bc 	bl	8004578 <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 f8b7 	bl	8004578 <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d00a      	beq.n	8004424 <sbrk_aligned+0x34>
 800440e:	1cc4      	adds	r4, r0, #3
 8004410:	f024 0403 	bic.w	r4, r4, #3
 8004414:	42a0      	cmp	r0, r4
 8004416:	d007      	beq.n	8004428 <sbrk_aligned+0x38>
 8004418:	1a21      	subs	r1, r4, r0
 800441a:	4628      	mov	r0, r5
 800441c:	f000 f8ac 	bl	8004578 <_sbrk_r>
 8004420:	3001      	adds	r0, #1
 8004422:	d101      	bne.n	8004428 <sbrk_aligned+0x38>
 8004424:	f04f 34ff 	mov.w	r4, #4294967295
 8004428:	4620      	mov	r0, r4
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	200004e0 	.word	0x200004e0

08004430 <_malloc_r>:
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	1ccd      	adds	r5, r1, #3
 8004436:	f025 0503 	bic.w	r5, r5, #3
 800443a:	3508      	adds	r5, #8
 800443c:	2d0c      	cmp	r5, #12
 800443e:	bf38      	it	cc
 8004440:	250c      	movcc	r5, #12
 8004442:	2d00      	cmp	r5, #0
 8004444:	4607      	mov	r7, r0
 8004446:	db01      	blt.n	800444c <_malloc_r+0x1c>
 8004448:	42a9      	cmp	r1, r5
 800444a:	d905      	bls.n	8004458 <_malloc_r+0x28>
 800444c:	230c      	movs	r3, #12
 800444e:	2600      	movs	r6, #0
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4630      	mov	r0, r6
 8004454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004458:	4e2e      	ldr	r6, [pc, #184]	; (8004514 <_malloc_r+0xe4>)
 800445a:	f000 f89d 	bl	8004598 <__malloc_lock>
 800445e:	6833      	ldr	r3, [r6, #0]
 8004460:	461c      	mov	r4, r3
 8004462:	bb34      	cbnz	r4, 80044b2 <_malloc_r+0x82>
 8004464:	4629      	mov	r1, r5
 8004466:	4638      	mov	r0, r7
 8004468:	f7ff ffc2 	bl	80043f0 <sbrk_aligned>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	4604      	mov	r4, r0
 8004470:	d14d      	bne.n	800450e <_malloc_r+0xde>
 8004472:	6834      	ldr	r4, [r6, #0]
 8004474:	4626      	mov	r6, r4
 8004476:	2e00      	cmp	r6, #0
 8004478:	d140      	bne.n	80044fc <_malloc_r+0xcc>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	4631      	mov	r1, r6
 800447e:	4638      	mov	r0, r7
 8004480:	eb04 0803 	add.w	r8, r4, r3
 8004484:	f000 f878 	bl	8004578 <_sbrk_r>
 8004488:	4580      	cmp	r8, r0
 800448a:	d13a      	bne.n	8004502 <_malloc_r+0xd2>
 800448c:	6821      	ldr	r1, [r4, #0]
 800448e:	3503      	adds	r5, #3
 8004490:	1a6d      	subs	r5, r5, r1
 8004492:	f025 0503 	bic.w	r5, r5, #3
 8004496:	3508      	adds	r5, #8
 8004498:	2d0c      	cmp	r5, #12
 800449a:	bf38      	it	cc
 800449c:	250c      	movcc	r5, #12
 800449e:	4638      	mov	r0, r7
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7ff ffa5 	bl	80043f0 <sbrk_aligned>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d02b      	beq.n	8004502 <_malloc_r+0xd2>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	442b      	add	r3, r5
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	e00e      	b.n	80044d0 <_malloc_r+0xa0>
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	1b52      	subs	r2, r2, r5
 80044b6:	d41e      	bmi.n	80044f6 <_malloc_r+0xc6>
 80044b8:	2a0b      	cmp	r2, #11
 80044ba:	d916      	bls.n	80044ea <_malloc_r+0xba>
 80044bc:	1961      	adds	r1, r4, r5
 80044be:	42a3      	cmp	r3, r4
 80044c0:	6025      	str	r5, [r4, #0]
 80044c2:	bf18      	it	ne
 80044c4:	6059      	strne	r1, [r3, #4]
 80044c6:	6863      	ldr	r3, [r4, #4]
 80044c8:	bf08      	it	eq
 80044ca:	6031      	streq	r1, [r6, #0]
 80044cc:	5162      	str	r2, [r4, r5]
 80044ce:	604b      	str	r3, [r1, #4]
 80044d0:	4638      	mov	r0, r7
 80044d2:	f104 060b 	add.w	r6, r4, #11
 80044d6:	f000 f865 	bl	80045a4 <__malloc_unlock>
 80044da:	f026 0607 	bic.w	r6, r6, #7
 80044de:	1d23      	adds	r3, r4, #4
 80044e0:	1af2      	subs	r2, r6, r3
 80044e2:	d0b6      	beq.n	8004452 <_malloc_r+0x22>
 80044e4:	1b9b      	subs	r3, r3, r6
 80044e6:	50a3      	str	r3, [r4, r2]
 80044e8:	e7b3      	b.n	8004452 <_malloc_r+0x22>
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	42a3      	cmp	r3, r4
 80044ee:	bf0c      	ite	eq
 80044f0:	6032      	streq	r2, [r6, #0]
 80044f2:	605a      	strne	r2, [r3, #4]
 80044f4:	e7ec      	b.n	80044d0 <_malloc_r+0xa0>
 80044f6:	4623      	mov	r3, r4
 80044f8:	6864      	ldr	r4, [r4, #4]
 80044fa:	e7b2      	b.n	8004462 <_malloc_r+0x32>
 80044fc:	4634      	mov	r4, r6
 80044fe:	6876      	ldr	r6, [r6, #4]
 8004500:	e7b9      	b.n	8004476 <_malloc_r+0x46>
 8004502:	230c      	movs	r3, #12
 8004504:	4638      	mov	r0, r7
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	f000 f84c 	bl	80045a4 <__malloc_unlock>
 800450c:	e7a1      	b.n	8004452 <_malloc_r+0x22>
 800450e:	6025      	str	r5, [r4, #0]
 8004510:	e7de      	b.n	80044d0 <_malloc_r+0xa0>
 8004512:	bf00      	nop
 8004514:	200004dc 	.word	0x200004dc

08004518 <_realloc_r>:
 8004518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451c:	4680      	mov	r8, r0
 800451e:	4614      	mov	r4, r2
 8004520:	460e      	mov	r6, r1
 8004522:	b921      	cbnz	r1, 800452e <_realloc_r+0x16>
 8004524:	4611      	mov	r1, r2
 8004526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	f7ff bf81 	b.w	8004430 <_malloc_r>
 800452e:	b92a      	cbnz	r2, 800453c <_realloc_r+0x24>
 8004530:	f7ff ff16 	bl	8004360 <_free_r>
 8004534:	4625      	mov	r5, r4
 8004536:	4628      	mov	r0, r5
 8004538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800453c:	f000 f838 	bl	80045b0 <_malloc_usable_size_r>
 8004540:	4284      	cmp	r4, r0
 8004542:	4607      	mov	r7, r0
 8004544:	d802      	bhi.n	800454c <_realloc_r+0x34>
 8004546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800454a:	d812      	bhi.n	8004572 <_realloc_r+0x5a>
 800454c:	4621      	mov	r1, r4
 800454e:	4640      	mov	r0, r8
 8004550:	f7ff ff6e 	bl	8004430 <_malloc_r>
 8004554:	4605      	mov	r5, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d0ed      	beq.n	8004536 <_realloc_r+0x1e>
 800455a:	42bc      	cmp	r4, r7
 800455c:	4622      	mov	r2, r4
 800455e:	4631      	mov	r1, r6
 8004560:	bf28      	it	cs
 8004562:	463a      	movcs	r2, r7
 8004564:	f7ff fed4 	bl	8004310 <memcpy>
 8004568:	4631      	mov	r1, r6
 800456a:	4640      	mov	r0, r8
 800456c:	f7ff fef8 	bl	8004360 <_free_r>
 8004570:	e7e1      	b.n	8004536 <_realloc_r+0x1e>
 8004572:	4635      	mov	r5, r6
 8004574:	e7df      	b.n	8004536 <_realloc_r+0x1e>
	...

08004578 <_sbrk_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	2300      	movs	r3, #0
 800457c:	4d05      	ldr	r5, [pc, #20]	; (8004594 <_sbrk_r+0x1c>)
 800457e:	4604      	mov	r4, r0
 8004580:	4608      	mov	r0, r1
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	f7fc fd4e 	bl	8001024 <_sbrk>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_sbrk_r+0x1a>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_sbrk_r+0x1a>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	200004e4 	.word	0x200004e4

08004598 <__malloc_lock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_lock+0x8>)
 800459a:	f000 b811 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 800459e:	bf00      	nop
 80045a0:	200004e8 	.word	0x200004e8

080045a4 <__malloc_unlock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__malloc_unlock+0x8>)
 80045a6:	f000 b80c 	b.w	80045c2 <__retarget_lock_release_recursive>
 80045aa:	bf00      	nop
 80045ac:	200004e8 	.word	0x200004e8

080045b0 <_malloc_usable_size_r>:
 80045b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b4:	1f18      	subs	r0, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bfbc      	itt	lt
 80045ba:	580b      	ldrlt	r3, [r1, r0]
 80045bc:	18c0      	addlt	r0, r0, r3
 80045be:	4770      	bx	lr

080045c0 <__retarget_lock_acquire_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_release_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
